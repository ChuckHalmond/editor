{"version":3,"file":"elements/controls/forms/Select.js","mappings":"kFA0DA,MAAMA,EAAgD,SAClDC,GAOA,MAAO,CACHC,EAAWC,KAEX,MAAM,YAACC,GAAeF,GAChB,UAACG,GAAaD,EACdE,EAAeC,OAAOJ,IACtB,aAACK,EAAe,KAAI,SAAEC,GAAW,EAAK,KAAEC,GAAO,QAAaJ,IAAiBL,EACnF,GAAIQ,EAAU,CACV,MAAME,EAAqBC,QAAQC,IAAIT,EAAa,qBAAsBA,GACtEU,MAAMC,QAAQJ,GACdA,EAAmBK,KAAKN,GAGxBO,OAAOC,eACHd,EAAa,qBAAsB,CAC/Be,MAAO,CAACT,GACRU,UAAU,G,CAK1B,MAAM,KAACC,GAAQpB,EACf,OAAQoB,GACJ,KAAKC,QACDL,OAAOC,eAAeb,EAAWC,EAAc,CAC3CO,IAAK,WACD,OAAOU,KAAKC,aAAad,EAC7B,EACAe,IAAK,SAA4BN,GACzBA,EACAI,KAAKG,aAAahB,EAAM,IAGxBa,KAAKI,gBAAgBjB,EAE7B,IAEJ,MAEJ,KAAKO,OACDA,OAAOC,eAAeb,EAAWC,EAAc,CAC3CO,IAAK,WACD,MAAMe,EAAML,KAAKM,aAAanB,GAC9B,OAAgB,OAARkB,EAAgBE,KAAKC,MAAMH,GAAOpB,CAC9C,EACAiB,IAAK,SAA4BN,GACf,OAAVA,EACAI,KAAKG,aAAahB,EAAMoB,KAAKE,UAAUb,IAGvCI,KAAKI,gBAAgBjB,EAE7B,IAEJ,MAEJ,KAAKuB,OACDhB,OAAOC,eAAeb,EAAWC,EAAc,CAC3CO,IAAK,WACD,MAAMe,EAAML,KAAKM,aAAanB,GAC9B,OAAgB,OAARkB,EAAgBM,WAAWN,GAAOpB,CAC9C,EACAiB,IAAK,SAA4BN,GACf,OAAVA,EACAI,KAAKG,aAAahB,EAAMS,GAGxBI,KAAKI,gBAAgBjB,EAE7B,IAEJ,MAGJ,QACIO,OAAOC,eAAeb,EAAWC,EAAc,CAC3CO,IAAK,WACD,MAAMe,EAAML,KAAKM,aAAanB,GAC9B,OAAgB,OAARkB,EAAgBA,EAAMpB,CAClC,EACAiB,IAAK,SAA4BN,GACf,OAAVA,EACAI,KAAKG,aAAahB,EAAMS,GAGxBI,KAAKI,gBAAgBjB,EAE7B,I,CAMpB,EA0BMyB,EAAwC,SAASlC,GAInD,OACImC,IAEA,MAAM,KAAC1B,EAAI,QAAE2B,GAAWpC,EAQxB,OAPKqC,eAAezB,IAAIH,IACpB4B,eAAeC,OACX7B,EACA0B,EACAC,GAGDD,CAAW,CAE1B,EAkGA,SAASI,EACLC,EAAYxC,GACZ,GAAIA,EAAM,CACN,MAAM,QAACoC,EAAO,WAAEK,EAAU,QAAEC,EAAO,SAAEC,EAAQ,UAAEC,GAAa5C,EACtDuC,EAAUM,SAASC,cAAcN,EAASJ,GAahD,GAZIK,GACAzB,OAAO+B,QAAQN,GAAYO,SAAQ,EAAEC,EAAeC,WACzBC,IAAnBD,IAC8B,kBAAnBA,EACPX,EAAQa,iBAAgB,QAAaH,GAAgBC,GAGrDX,EAAQd,cAAa,QAAawB,GAAgB3C,OAAO4C,I,IAKrER,EAAS,CACT,MAAOA,QAASW,GAAkBd,EAClCvB,OAAOsC,KAAKZ,GAASM,SAASO,IAC1BF,EAAeE,GAAkBjD,OAAOoC,EAAQa,GAAgB,G,CAwBxE,OArBIZ,IACwB,mBAAbA,EACPA,EAASJ,GAEgB,iBAAbI,GAAyB,WAAYA,EACjDJ,EAAQiB,UAAU3C,MAAM4C,KAAKd,IAG7BJ,EAAQiB,OAAOb,IAGnBC,GACA5B,OAAO+B,QAAQH,GAAWI,SAAQ,EAAEU,EAAQC,MACpC9C,MAAMC,QAAQ6C,GACdpB,EAAQqB,iBAAiBF,EAAQC,EAAW,GAAIA,EAAW,IAG3DpB,EAAQqB,iBAAiBF,EAAQC,E,IAItCpB,C,CAEX,OAAOM,SAASC,cAAcN,EAClC,CAEA,MAAMqB,EAAsB,IAAIC,QASa,IAAIC,sBAAsBC,IAQnE,MAAM,MAACC,EAAK,gBAAEC,GAAmBF,EAC3BG,EAA2BN,EAAoBjD,IAAIqD,GACzD,QAAiCd,IAA7BgB,EAAwC,CACxC,MAAM,sBAACC,GAAyBD,EAChCC,EAAsBC,OAAOD,EAAsBE,QAAQJ,GAAkB,E,KAI5C,IAAI,MAAqBK,IAC9DA,EAAQvB,SAASwB,IACb,MAAM,OAACvE,EAAM,aAAEI,EAAY,SAAEoE,EAAQ,SAAEC,GAAYF,GAC7C,sBAACJ,GAAyBP,EAAoBjD,IAAIX,GACxDmE,EAAsBpB,SAAQ2B,IAC1B,MAAM,WAACC,EAAU,MAAEC,EAAK,WAAEC,GAAcH,EAClCpC,EAAUqC,EAAWG,QACvBxC,GACIuC,EAAWE,SAAS3E,IACpBwE,EAAMtC,EAASlC,EAAeoE,EAAUC,E,GAGlD,GACJ,IAuEN,MAAMO,EAA2B,IAAInB,QAQa,IAAIC,sBAAsBC,IAQxE,MAAM,KAACkB,EAAI,qBAAEC,GAAwBnB,EAC/BoB,EAAmCH,EAAyBrE,IAAIsE,GACtE,GAAIE,EAAkC,CAClC,MAAM,2BAACC,GAA8BD,EACrCC,EAA2BhB,OAAOgB,EAA2Bf,QAAQa,GAAuB,E,KAI9D,IAAI,MAAqBZ,IAC3D,IAAIe,EAAsB,KAC1BzE,MAAM4C,KAAKc,EAAQgB,UAAUvC,SAASwB,IAClC,MAAM,OAACvE,GAAUuE,EACXU,EAAkBjF,GACjBuF,OAAQC,GAAcP,GACvB,2BAACG,GAA8BJ,EAAyBrE,IAAIsE,GAClEG,EAA2BrC,SAAS0C,IAChC,MAAM,UAACC,EAAS,QAAEC,EAAO,YAAEC,GAAeH,EACpCI,EAASH,EAAUZ,QACzB,GAAIe,EAAQ,CACR,MAAM,WAACC,EAAU,SAAEpD,GAAYmD,GACxBN,OAAQQ,GAAiBrD,EAC5BkD,GAAeJ,EAAa,GAAKM,GAAcF,GAC/CC,EAAOG,YAAYJ,GAEvB,MAAM,WAACK,EAAU,YAAEC,EAAW,YAAEC,EAAW,UAAEC,GAAa7B,EAC1D,OAAQ0B,GACJ,KAAKC,EAAa,CACd,MAAM,cAACG,EAAa,cAAEC,GAAiB/B,EACjCgC,EAAqB3F,MAAM4C,KAAK8C,EAAchB,UAAUkB,IAAIb,IAC3DJ,OAAQQ,GAAiBrD,EAC5B2D,EAAgBN,EAChBrD,EAAS2D,GAAeI,UAAUF,GAGlCV,EAAOtC,UAAUgD,GAErB,K,CAEJ,KAAKJ,EAAa,CACd,MAAM,aAACO,EAAY,aAAEC,GAAgBpC,GAC9BgB,OAAQqB,GAAgBD,EAC/BtB,EAAQA,GAASzC,SAASiE,cAC1B,MAAMC,EAAiBJ,GAAgBE,EAAe,GAClDE,EAAiBf,IACjBV,EAAM0B,eAAerE,EAASgE,IAC9BrB,EAAM2B,YAAYtE,EAASoE,IAC3BzB,EAAM4B,kBAEV,K,CAEJ,KAAKb,EAAW,CACZ,MAAM,cAACc,GAAiB3C,EAClB4C,EAAgBvG,MAAM4C,KAAKd,GACjCmD,EAAOtC,UACA2D,EAAcE,QACbC,GAAWA,EAAUtB,IACvBS,KACEa,GAAWF,EAAcE,MAGjC,K,EAGU,GAAd7B,GAAmBI,GACnBC,EAAOtC,OAAOqC,E,IAGxB,GACJ,G,iBC5gBN,SAAS0B,EAAaC,GACpB,OAAOA,EAAIC,QAAQ,mBAAoB,KAAKC,aAC9C,C,uDCMIC,EACAC,E,gVAKJ,IAAMC,EAAN,cAAqCC,YAuEjC3H,cACI4H,QACA,MAAMC,EAAY1G,KAAK2G,kBACvBD,EAAUE,KAAO,SACjB5G,KAAK0G,UAAYA,EACjB,MAAMG,EAAa7G,KAAK8G,aAAa,CAACC,KAAM,SACtCC,EAAoB,IAAIC,cAC9BD,EAAkBb,QAAQG,GAC1BO,EAAWK,mBAAqB,CAACF,GACjCH,EAAW3E,OACPmE,EAAec,QAAQC,WAAU,GAEzC,CAEAC,oBACI,MAAM,SAACC,GAAYtH,KACnBA,KAAKsH,SAAWA,CACpB,CAEAC,yBAAyBpI,EAAcgE,EAAyBC,GAC5D,OAAQjE,GACJ,IAAK,QAAS,CACV,MAAM,WAAC0H,GAAc7G,KACfwH,EAAYX,EAAWY,cAA2B,gBACpDD,IACAA,EAAUE,YAActE,GAE5B,K,CAEJ,IAAK,WAAY,CACb,MAAM,UAACsD,EAAS,SAAEiB,GAAY3H,KAC9B0G,EAAUkB,aAAe5I,OAAO2I,GAChC3H,KAAK6H,cAAc,IAAIC,MAAM,SAAU,CAACC,SAAS,KACjD,K,EAGZ,IAvFI1B,GAAiB,QAAQ,aACVc,QAAQjF,QACnB,QAAQ,OAAQ,CACZf,WAAY,CACR6G,KAAM,YAIlB1B,EAAe,yvCAvBnB,IADC,QAAkB,CAACxG,KAAMd,U,2BAI1B,IADC,QAAkB,CAACc,KAAMd,U,4BAI1B,IADC,QAAkB,CAACc,KAAMd,OAAQE,UAAU,K,4BAI5C,IADC,QAAkB,CAACY,KAAMC,W,+BAI1B,IADC,QAAkB,CAACD,KAAMC,QAASb,UAAU,K,+BAhB3CqH,EAAsB,IAH3B,QAAc,CACXpH,KAAM,cAEJoH,GA8GN,IAAI0B,EAAoD1B,C,sCC3HpDF,E,UAMJ,IAAM6B,EAAN,cAA0C1B,YAgBtC3H,cACI4H,QACmBzG,KAAK8G,aAAa,CAACC,KAAM,SACjC7E,OACPmE,EAAec,QAAQC,WAAU,GAEzC,IAjBIf,GAAiB,QAAQ,aACVc,QAAQjF,QACnB,QAAQ,SAPdgG,E,mUAA2B,GAHhC,QAAc,CACX/I,KAAM,mBAEJ+I,GAyBN,IAAIC,EAA8DD,C,iuBCFlE,MAAME,EAYFvJ,YACIH,GAaAsB,KAAKrB,OAASD,EAAKC,OACnBqB,KAAK4E,WAAalG,EAAKkG,WACvB5E,KAAKjB,aAAeL,EAAKK,cAAgB,KACzCiB,KAAKmD,SAAWzE,EAAKyE,eAAYtB,EACjC7B,KAAKoD,SAAW1E,EAAK0E,eAAYvB,EACjC7B,KAAKqF,aAAe3G,EAAK2G,cAAgB,EACzCrF,KAAKsF,aAAe,IAAI+C,EAAe3J,EAAK4G,cAAgB,IAC5DtF,KAAKgF,cAAgBtG,EAAKsG,eAAiB,EAC3ChF,KAAKiF,cAAgB,IAAIoD,EAAe3J,EAAKuG,eAAiB,IAC9DjF,KAAK6F,cAAgBnH,EAAKmH,eAAiB,EAC/C,CAEWyC,6BACP,OAAO,CACX,CAEWxD,yBACP,OAAO,CACX,CAEWD,yBACP,OAAO,CACX,CAEWE,uBACP,OAAO,CACX,CAEIuD,sBACA,OAAOF,EAAsBE,eACjC,CAEIxD,kBACA,OAAOsD,EAAsBtD,WACjC,CAEID,kBACA,OAAOuD,EAAsBvD,WACjC,CAEIE,gBACA,OAAOqD,EAAsBrD,SACjC,EAGJ,IAAIwD,EAAkDH,E,cAiCtD,IAAIC,EApBJ,MAGIxJ,YAAY2J,GAFZ,mBAGI,EAAAxI,KAAI,EAAUwI,EAAMC,QAAO,IAC/B,CAEIvE,aACA,OAAO,EAAAlE,KAAI,OAAQkE,MACvB,CAEAwE,KAAKC,GACD,OAAO,EAAA3I,KAAI,OAAQ2I,IAAU,IACjC,CAEA1E,SACI,OAAO,EAAAjE,KAAI,OAAQiE,QACvB,GAgBJ,MAAM2E,EAMF/J,YAAYiB,GAHZ,mBACA,mBAGIE,KAAKF,KAAOA,EACZ,EAAAE,KAAI,EAAkB,KAAI,KAC1B,EAAAA,KAAI,EAAW,KAAI,IACvB,CAEI6I,oBACA,OAAO,EAAA7I,KAAI,MACf,CAEIrB,aACA,OAAO,EAAAqB,KAAI,MACf,E,4BAEO,EAAA8I,yBAA4B,IAAI,MACnCC,iBAAiBC,EAAmBH,GAC5BG,aAAiBJ,GACjB,EAAAI,EAAK,EAAkBH,EAAa,IAE5C,CAEAI,UAAUD,EAAmBrK,GACrBqK,aAAiBJ,GACjB,EAAAI,EAAK,EAAWrK,EAAM,IAE9B,GASR,IAAImK,EAAqDF,EAAeE,gCACjEF,EAAeE,yBAEtB,IAAII,EAAoCN,EAcxC,MAAMO,EAGFtK,cAFA,mBAGI,EAAAmB,KAAI,EAAc,IAAIoJ,IAAK,IAC/B,CAEAC,aAAaL,GACT,MAAM,KAAClJ,GAAQkJ,EACTM,EAAY,EAAAtJ,KAAI,OAAYV,IAAIQ,GACtCgJ,EAAyBC,iBAAiBC,EAAOhJ,MAC7CsJ,GACAA,EAAU5H,SAAS6H,IACfA,EAAWP,EAAM,GAG7B,CAEA1G,iBAAiBxC,EAAc0J,GAC3B,MAAMF,EAAY,EAAAtJ,KAAI,OAAYV,IAAIQ,GAClCwJ,EACAA,EAAU7J,KAAK+J,GAGf,EAAAxJ,KAAI,OAAYE,IAAIJ,EAAM,CAAC0J,GAEnC,CAEAC,oBAAoB3J,EAAc0J,GAC9B,MAAMF,EAAY,EAAAtJ,KAAI,OAAYV,IAAIQ,GACtC,GAAIwJ,EAAW,CACX,MAAMI,EAAgBJ,EAAUK,WAC5BJ,GAAcA,GAAcC,IAE5BE,GAAiB,GACjBJ,EAAUvG,OAAO2G,EAAe,GAEZ,GAApBJ,EAAUpF,QACV,EAAAlE,KAAI,OAAY4J,OAAO9J,E,CAGnC,CAEA+H,cAAcmB,GACVF,EAAyBG,UAAUD,EAAOhJ,MAC1CA,KAAKqJ,aAAaL,EACtB,E,cAuBJ,MAAMa,UAAsBV,EAKxBtK,cACI4H,Q,YALJ,mBACA,mBACA,mBAII,EAAAzG,KAAI,EAAe,KAAI,KACvB,EAAAA,KAAI,EAAY,GAAE,KAClB,EAAAA,KAAI,GAAgB,EAAK,IAC7B,CAEI8J,iBACA,OAAO,EAAA9J,KAAI,MACf,CAEA+J,UAAUD,GACN,GAAmB,OAAfA,EAAqB,CACrB,IAAIE,EAAoBF,GAAc9J,MACjC8J,WAAYG,GAAgBH,EACjC,MAAQE,GAAsC,OAAjBC,KACvBH,WAAYG,GAAgBA,GAC9BD,EAAoBC,GAAgBjK,KAExC,GAAKgK,EAID,MAAM,IAAIE,UAAU,oFAHpB,EAAAlK,KAAI,EAAe8J,EAAU,I,MAOjC,EAAA9J,KAAI,EAAe,KAAI,IAE/B,CAEAmK,eACI,EAAAnK,KAAI,GAAgB,EAAI,IAC5B,CAEAoK,aACIpK,KAAK6H,cAAc,IAAIqB,EAAW,gBAClC,EAAAlJ,KAAI,OAAU+C,OAAO,GACrB,EAAA/C,KAAI,GAAgB,EAAK,IAC7B,CAEAqK,aACI,OAAO,EAAArK,KAAI,OAAUyI,OACzB,CAEAY,aAAaL,GACTvC,MAAM4C,aAAaL,GACnB,MAAM,WAACc,GAAc9J,KACjB8J,GACAA,EAAWT,aAAaL,EAEhC,E,mEAEepK,EAAkBuE,EAAeC,GAC5C,MAAMH,EAAU,EAAAjD,KAAI,OACdsK,EAAS,IAAI/B,EAAkB,CACjC5J,OAAQqB,KACR4E,WAAY2D,EAAkBD,gBAC9BvJ,aAAcH,EACduE,WAAUC,aAEdH,EAAQxD,KAAK6K,GACR,EAAAtK,KAAI,SACLA,KAAK6H,cAAc,IAAIqB,EAAW,gBAClCjG,EAAQF,OAAO,GAEvB,EAAC,WAEauH,GACV,EAAAtK,KAAI,OAAUP,KAAK6K,GACd,EAAAtK,KAAI,SACLA,KAAK6H,cAAc,IAAIqB,EAAW,gBAClC,EAAAlJ,KAAI,OAAU+C,OAAO,GAE7B,EAEO,EAAAwH,yBAA4B,IAAI,MACnCC,cAAcC,EAAiB7L,EAAkBuE,EAAeC,GACxDqH,aAAgBZ,GAChB,EAAAY,EAAI,SAAe,KAAnBA,EAAoB7L,EAAUuE,EAAUC,EAEhD,CAEAsH,aAAaD,EAAiBH,GACtBG,aAAgBZ,GAChB,EAAAY,EAAI,SAAc,KAAlBA,EAAmBH,EAE3B,GAIR,IAAIC,EAAqDV,EAAcU,gCAChEV,EAAcU,yBAErB,IAAII,EAAkCd,EA2CtC,MAAMe,UAAwBf,EAG1BhL,cACI4H,QAHJ,mBAII,EAAAzG,KAAI,EAAe,IAAIoJ,IAAK,IAChC,E,cAEO,EAAAyB,8BAAiC,IAAI,MACxCC,YAAYL,EAAmB7L,EAAkBgB,GACzC6K,aAAgBG,GAChB,EAAAH,EAAI,OAAavK,IAAItB,EAAUgB,EAEvC,CAEAmL,YAAYN,EAAmB7L,GAC3B,GAAI6L,aAAgBG,EAChB,OAAO,EAAAH,EAAI,OAAanL,IAAIV,EAEpC,GAI2DgM,EAAgBC,qCAC5ED,EAAgBC,8B,cAsMvB,IAAIG,EA9KJ,cAAiEnB,EAK7DhL,YAAY2J,GACR/B,QALJ,mBAMI,EAAAzG,KAAI,EAAUwI,GAAOC,SAAW,GAAE,IACtC,CAEAsB,UAAUD,GACNrD,MAAMsD,UAAUD,GAChB,EAAA9J,KAAI,OAAQ0B,SAASuJ,IACjBA,EAAOlB,UAAUD,EAAW,GAEpC,CAEI5F,aACA,OAAO,EAAAlE,KAAI,OAAQkE,MACvB,CAEA5E,IAAIqJ,GACA,OAAO,EAAA3I,KAAI,OAAQ2I,IAAU,IACjC,CAEAA,MAAMD,GACF,OAAO,EAAA1I,KAAI,OAAQgD,QAAQ0F,EAC/B,CAEAzE,SACI,OAAO,EAAAjE,KAAI,OAAQiE,QACvB,CAEAiH,KAAKC,GACD,MACMC,EADQ,EAAApL,KAAI,OACSmF,KACvB,CAAC8F,EAAQI,KACE,CACH3C,KAAMuC,EACNtC,MAAO0C,MAInBD,EAAaF,MACT,CAACI,EAAeC,IACLJ,EACHG,EAAc5C,KAAM6C,EAAc7C,QAI9C,EAAA1I,KAAI,EAAUoL,EAAajG,KAAIqG,GAAiBA,EAAc9C,OAAK,KACnE,MAAM4B,EAAS,IAAI/B,EAAkB,CACjC5J,OAAQqB,KACR4E,WAAY2D,EAAkBxD,UAC9Bc,cAAeuF,EAAajG,KAAIqG,GAAiBA,EAAc7C,UAEnE4B,EAAyBG,aAAa1K,KAAMsK,EAChD,CAEAmB,WAAWjD,GACP,MAAMkD,EAAS,EAAA1L,KAAI,QACb,WAAC8J,GAAc9J,KACjB8J,GACAtB,EAAM9G,SAAQuJ,IACVA,EAAOlB,UAAUD,EAAW,IAGpC4B,EAAO3I,OAAO,EAAG,KAAMyF,GACvB,MAAM8B,EAAS,IAAI/B,EAAkB,CACjC5J,OAAQqB,KACR4E,WAAY2D,EAAkB1D,YAC9BG,cAAe,EACfC,cAAeuD,IAEnB+B,EAAyBG,aAAa1K,KAAMsK,EAChD,CAEApI,UAAUsG,GACN,MAAMkD,EAAS,EAAA1L,KAAI,QACb,OAACkE,GAAUwH,GACX,WAAC5B,GAAc9J,KACjB8J,GACAtB,EAAM9G,SAAQuJ,IACVA,EAAOlB,UAAUD,EAAW,IAGpC4B,EAAOjM,QAAQ+I,GACf,MAAM8B,EAAS,IAAI/B,EAAkB,CACjC5J,OAAQqB,KACR4E,WAAY2D,EAAkB1D,YAC9BG,cAAed,EACfe,cAAeuD,IAEnB+B,EAAyBG,aAAa1K,KAAMsK,EAChD,CAEAqB,OAAOhD,KAAkBH,GACrB,MAAMkD,EAAS,EAAA1L,KAAI,QACb,OAACkE,GAAUwH,EAEjB,GADsBE,KAAKC,IAAIlD,IACVzE,EAAQ,CACzB,GAAIyE,GAAS,EAAG,CACZ,MAAM,WAACmB,GAAc9J,KACrBwI,EAAM9G,SAAQuJ,IACVA,EAAOlB,UAAUD,EAAW,IAE5BnB,EAAQzE,EACRwH,EAAO3I,OAAO4F,EAAO,KAAMH,GAG3BkD,EAAOjM,QAAQ+I,E,MAGlB,GAAIG,EAAQ,EAAG,CAChBA,EAAQzE,EAASyE,EACjB,MAAM,WAACmB,GAAc9J,KACjB8J,GACAtB,EAAM9G,SAAQuJ,IACVA,EAAOlB,UAAUD,EAAW,IAGpC4B,EAAO3I,OAAO4F,EAAO,KAAMH,E,CAE/B,MAAM8B,EAAS,IAAI/B,EAAkB,CACjC5J,OAAQqB,KACR4E,WAAY2D,EAAkB1D,YAC9BG,cAAe2D,EACf1D,cAAeuD,EAAMC,UAEzB8B,EAAyBG,aAAa1K,KAAMsK,E,CAEpD,CAEAwB,OAAOpD,GACH,MAAMgD,EAAS,EAAA1L,KAAI,OACb2I,EAAQ+C,EAAO1I,QAAQ0F,GAC7B,GAAIC,GAAS,EAAG,CACZ,MAAMD,EAAOgD,EAAO3I,OAAO4F,EAAO,GAAG,IAC/B,WAACmB,GAAc9J,KACjB8J,GACApB,EAAKqB,UAAU,MAEnB,MAAMO,EAAS,IAAI/B,EAAkB,CACjC5J,OAAQqB,KACR4E,WAAY2D,EAAkBzD,YAC9BO,aAAcsD,EACdrD,aAAc,CAACoD,KAEnB6B,EAAyBG,aAAa1K,KAAMsK,E,CAEpD,CAEAyB,QACI,MAAMvD,EAAQ,EAAAxI,KAAI,QACZ,OAACkE,GAAUsE,EACjB,GAAItE,EAAS,EAAG,CACZ,MAAMoB,EAAekD,EAAMzF,OAAO,IAC5B,WAAC+G,GAAc9J,KACjB8J,GACAxE,EAAa5D,SAASsK,IAClBA,EAAcjC,UAAU,KAAK,IAGrC,MAAMO,EAAS,IAAI/B,EAAkB,CACjC5J,OAAQqB,KACR4E,WAAY2D,EAAkBzD,YAC9BO,aAAc,EACdC,aAAcA,IAElBiF,EAAyBG,aAAa1K,KAAMsK,E,CAEpD,G,mFAsEI,MAAMrH,EAAU,EAAAjD,KAAI,OAAU+C,OAAO,GACjCE,EAAQiB,OAAS,GACjB,EAAAlE,KAAI,OAAU,KAAdA,KAAeiD,EAEvB,EAAC,WAEiB+F,GACd,IAAK,EAAAhJ,KAAI,OAAgB,CACrB,MAAM,OAACrB,EAAM,cAAEkK,GAAiBG,EAC1BiD,EAAY,EAAAjM,KAAI,OAAaV,IAAeuJ,GAClD,GAAIoD,EAAW,CACX,MAAM,QAACnL,GAAWmL,GACZ,WAACzI,EAAU,iBAAE0I,EAAgB,UAAEC,EAAS,QAAEC,GAAWtL,EACvDsL,EACI5I,GAAc7E,aAAkBgM,GAC5BuB,EACA,EAAAlM,KAAI,OAAUP,QACPd,EAAO0L,aACLtE,QAAO7C,IACJ,MAAM,aAACnE,GAAgBmE,EACvB,OAAOgJ,EAAiBxI,SACpB3E,EACH,KAKb,EAAAiB,KAAI,OAAUP,QACPd,EAAO0L,cAGlB,EAAArK,KAAI,SAAS,KAAbA,OAEKmM,GAAaxN,aAAkBqM,IACpC,EAAAhL,KAAI,OAAUP,QACPd,EAAO0L,cAEd,EAAArK,KAAI,SAAS,KAAbA,OAGCrB,GAAUkK,IACXrF,GAAc7E,aAAkBgM,GAC5BuB,EACA,EAAAlM,KAAI,OAAUP,QACPd,EAAO0L,aACLtE,QAAO7C,IACJ,MAAM,aAACnE,GAAgBmE,EACvB,OAAOgJ,EAAiBxI,SACpB3E,EACH,KAKb,EAAAiB,KAAI,OAAUP,QACPd,EAAO0L,cAGlB,EAAArK,KAAI,SAAS,KAAbA,OAEKmM,GAAaxN,aAAkBqM,IACpC,EAAAhL,KAAI,OAAUP,QACPd,EAAO0L,cAEd,EAAArK,KAAI,SAAS,KAAbA,O,EAKpB,EAGJ,IAAIqM,EAvHJ,MAUIxN,YAAY2K,G,YATZ,mBACA,mBACA,mBAEA,mBAMI,EAAAxJ,KAAI,EAAawJ,EAAQ,KACzB,EAAAxJ,KAAI,EAAY,GAAE,KAClB,EAAAA,KAAI,GAAiB,EAAK,KAC1B,EAAAA,KAAI,EAAe,IAAIwC,QAAS,IACpC,CAEA8J,QAAQ7B,EAAiB3J,GACrB,EAAAd,KAAI,GAAiB,EAAK,KAC1B,MAAMuM,EAAa,EAAAvM,KAAI,OACvB,IAAIiM,EAAYM,EAAWjN,IAAImL,GAC/B,GAAKwB,EAODM,EAAWrM,IAAIuK,EAAMwB,OAPT,CACZ,MAAMO,EAAW,EAAAxM,KAAI,SAAmByM,KAAKzM,MAC7CyK,EAAKnI,iBAAiB,cAAekK,GACrCP,EAAY,CAACO,WAAU1L,WACvByL,EAAWrM,IAAIuK,EAAMwB,E,CAK7B,CAEAS,UAAUjC,GAEN,IAAIwB,EADe,EAAAjM,KAAI,OACIV,IAAImL,GAC/B,GAAIwB,EAAW,CACX,MAAM,SAACO,GAAYP,EACnBxB,EAAKhB,oBAAoB,cAAe+C,E,CAEhD,CAEAG,aACI,EAAA3M,KAAI,OAAU+C,OAAO,GACrB,EAAA/C,KAAI,GAAiB,EAAI,IAC7B,E,GC9sBA4M,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBjL,IAAjBkL,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUG,EAAQA,EAAOD,QAASH,GAG/CI,EAAOD,OACf,CCrBAH,EAAoBM,EAAI,CAACH,EAASI,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEN,EAASK,IAC5E3N,OAAOC,eAAeqN,EAASK,EAAK,CAAEE,YAAY,EAAMjO,IAAK8N,EAAWC,IAE1E,ECNDR,EAAoBS,EAAI,CAACE,EAAKC,IAAU/N,OAAOZ,UAAU4O,eAAeC,KAAKH,EAAKC,G,0EC+B9EpH,EACAC,EACAsH,E,w/BAKJ,IAAMC,EAAN,cAAqCrH,YA+IjC3H,cACI4H,Q,YA7GJ,mBACA,mBA6GI,MAAMC,EAAY1G,KAAK2G,kBACvBD,EAAUE,KAAO,WACjB5G,KAAK0G,UAAYA,EACjB,EAAA1G,KAAI,GAA2B,EAAK,KACpC,EAAAA,KAAI,EAAWuB,SAASuM,iBACpB9N,KAAM+N,WAAWC,aAAc,EAAAhO,KAAI,SAAmByM,KAAKzM,OAC9D,KACD,MAAM6G,EAAa7G,KAAK8G,aAAa,CAACC,KAAM,SACtCC,EAAoB,IAAIC,cAC9BD,EAAkBb,QAAQG,GAC1BO,EAAWK,mBAAqB,CAACF,GACjCH,EAAW3E,OACPmE,EAAec,QAAQC,WAAU,IAErCpH,KAAKsC,iBAAiB,QAAS,EAAAtC,KAAI,SAAmByM,KAAKzM,OAC3DA,KAAKsC,iBAAiB,WAAY,EAAAtC,KAAI,SAAsByM,KAAKzM,OACjEA,KAAKsC,iBAAiB,YAAa,EAAAtC,KAAI,SAAuByM,KAAKzM,OACnEA,KAAKsC,iBAAiB,YAAa,EAAAtC,KAAI,SAAuByM,KAAKzM,OACnEA,KAAKsC,iBAAiB,UAAW,EAAAtC,KAAI,SAAqByM,KAAKzM,OAC/DA,KAAKsC,iBAAiB,SAAU,EAAAtC,KAAI,SAAoByM,KAAKzM,OAC7D4N,EAAiBtB,QACbtM,KAAM,CACFmM,WAAW,EACXC,SAAS,GAGrB,CAtKW6B,4BACP,OAAO,CACX,CAEInN,cACA,OAAOvB,MAAM4C,KAAKnC,KAAKkO,iBACnB,YAER,CAEIC,mBACA,OAAOnO,KAAKyH,cAAc,0BAA4B,IAC1D,CAEI2G,qBACA,OAAOpO,KAAKyH,cAAc,uBAAyB,IACvD,CAwJAJ,oBACI,MAAM,QAACvG,EAAO,eAAEsN,EAAc,MAAExO,GAASI,KACnCqO,EAAWrO,KAAKM,aAAa,YACnCN,KAAKsH,SAAwB,OAAb+G,EAAoBC,SAASD,GAAY,EACzDtN,eAAewN,QAAQvO,MACvB,MAAMwO,EAAiBJ,IACnBxO,EAAQkB,EAAQ2N,MACZC,GAAYA,EAAS9O,QAAUA,IAC/B,OACH,EAAAI,KAAI,SAAa,KAAjBA,MACDwO,IACIA,IAAmBJ,EACnB,EAAApO,KAAI,SAAmB,KAAvBA,KAAwBoO,GAGxB,EAAApO,KAAI,SAAc,KAAlBA,KAAmBwO,GAG/B,CAEAG,SACI,MAAM,SAACC,GAAY5O,KACnB,IAAK4O,EAAU,CACX5O,KAAK4O,UAAW,EAChB,EAAA5O,KAAI,SAAa,KAAjBA,MACA,MAAM,eAACoO,GAAkBpO,KACrBoO,GACAA,EAAeS,MAAM,CAACC,eAAe,G,CAGjD,CAEAC,WACI,MAAM,SAACH,GAAY5O,KACf4O,IACA5O,KAAK4O,UAAW,EAChB5O,KAAK6O,QAEb,CAEAG,OAAOC,GACH,MAAM,SAACL,GAAY5O,KACJiP,IAAUL,EAChB5O,KAAK2O,SAAW3O,KAAK+O,UAClC,G,uDAGI,OAAO/O,KAAK6G,WAAWY,cAA2B,eACtD,EAAC,aAGG,OAAOzH,KAAK6G,WAAWY,cAA2B,aACtD,EAAC,WAEiBgD,GACd,OAAIA,aAAgB,MAAuBA,EAAKyE,WAAazE,EAAK0E,OACvDpB,WAAWqB,cAEb3E,aAAgB,IACdsD,WAAWsB,YAEftB,WAAWuB,aACtB,EAAC,aAGG,MAAMC,EAAS,EAAAvP,KAAI,OAEnB,OADAuP,EAAOC,YAAcD,EAAOE,KACMF,EAAO9K,YAC7C,EAAC,aAGG,MAAM8K,EAAS,EAAAvP,KAAI,OAEnB,OADAuP,EAAOC,YAAcD,EAAOE,KACMF,EAAOG,WAC7C,EAAC,WAEeC,GACZ,MAAMJ,EAAS,EAAAvP,KAAI,OAEnB,OADAuP,EAAOC,YAAcG,EACaJ,EAAOK,cAC7C,EAAC,WAEWD,GACR,MAAMJ,EAAS,EAAAvP,KAAI,OAEnB,OADAuP,EAAOC,YAAcG,EACaJ,EAAOM,UAC7C,EAAC,WAEaF,GACV,MAAM,eAACvB,GAAkBpO,KACrB2P,IAAWvB,IACXuB,EAAOhI,UAAW,EAE1B,EAAC,WAEkBgI,GACf,MAAM,MAACG,EAAK,MAAElQ,GAAS+P,GAAU,CAC7BG,MAAO,GACPlQ,MAAO,KAEL,UAAC8G,GAAa1G,KACpB,EAAAA,KAAI,SAAO,KAAXA,MAAc0H,YAAcoI,EAC5BpJ,EAAUqJ,aAAanQ,EAC3B,EAAC,aAGG,MAAMoQ,EAAM,EAAAhQ,KAAI,SAAK,KAATA,OACLsG,MAAO2J,GAAgBD,GACxB,OAACE,EAAM,KAAEC,GAAQnQ,KAAKoQ,yBACtB,QAACC,EAAO,QAAEC,GAAWC,OAC3BN,EAAanF,YAAY,MAAO,GAAGoF,EAASI,OAC5CL,EAAanF,YAAY,OAAQ,GAAGqF,EAAOE,MAC/C,EAAC,WAEiBrH,GACd,MAAM,OAACrK,GAAUqK,EAEjB,GAD+B,EAAAhJ,KAAI,OAM9B,CACDA,KAAK+O,WACL,MAAMyB,EAA6B7R,EAAQ8R,QAA4B,YACnED,GACA,EAAAxQ,KAAI,SAAc,KAAlBA,KAAmBwQ,E,KATE,CACzB,MAAM,eAACpC,GAAkBpO,KACzBA,KAAK2O,UACJP,GAAkB,EAAApO,KAAI,SAAa,KAAjBA,OAAuBA,MAAM6O,MAAM,CAACC,eAAe,G,CAS9E,EAAC,WAEoB9F,GACjB,MAAM,cAAC0H,GAAiB1H,IACChJ,KAAK2Q,SAAeD,IACtB1Q,OAAS0Q,IAC5B1Q,KAAK+O,UAEb,EAAC,aAGG,MAAM,SAACH,GAAY5O,KACnB,EAAAA,KAAI,EAA2B4O,EAAQ,IAC3C,EAAC,WAEqB5F,GAClB,MAAM,OAACrK,GAAUqK,EACXwH,EAAyB7R,EAAQ8R,QAA4B,YAC/DD,GACAA,EAAa3B,MAAM,CAACC,eAAe,GAE3C,EAAC,WAEmB9F,GAChB,MAAM,IAACqE,GAAOrE,GACR,SAAC4F,EAAQ,aAAET,EAAY,eAAEC,GAAkBpO,KACjD,OAAQqN,GACJ,IAAK,UACD,GAAIuB,EAAU,CACV,MAAMgC,EAAiBzC,EACnB,EAAAnO,KAAI,SAAgB,KAApBA,KAAqBmO,GACrB,EAAAnO,KAAI,SAAa,KAAjBA,MACA4Q,GACAA,EAAe/B,MAAM,CAACC,eAAe,G,KAGxC,CACD,MAAM8B,EAAiBxC,EACnB,EAAApO,KAAI,SAAgB,KAApBA,KAAqBoO,GACrB,EAAApO,KAAI,SAAa,KAAjBA,MACA4Q,GACA,EAAA5Q,KAAI,SAAc,KAAlBA,KAAmB4Q,E,CAG3B5H,EAAM6H,kBACN,MAEJ,IAAK,YACD,GAAIjC,EAAU,CACV,MAAMkC,EAAa3C,EACf,EAAAnO,KAAI,SAAY,KAAhBA,KAAiBmO,GACjB,EAAAnO,KAAI,SAAY,KAAhBA,MACA8Q,GACAA,EAAWjC,MAAM,CAACC,eAAe,G,KAGpC,CACD,MAAMgC,EAAa1C,EACf,EAAApO,KAAI,SAAY,KAAhBA,KAAiBoO,GACjB,EAAApO,KAAI,SAAY,KAAhBA,MACA8Q,GACA,EAAA9Q,KAAI,SAAc,KAAlBA,KAAmB8Q,E,CAG3B9H,EAAM6H,kBACN,MAEJ,IAAK,OAAQ,CACT,MAAME,EAAc,EAAA/Q,KAAI,SAAa,KAAjBA,MAChB+Q,IACInC,EACAmC,EAAYlC,MAAM,CAACC,eAAe,IAGlC,EAAA9O,KAAI,SAAc,KAAlBA,KAAmB+Q,IAG3B/H,EAAM6H,kBACN,K,CAEJ,IAAK,MAAO,CACR,MAAMG,EAAa,EAAAhR,KAAI,SAAY,KAAhBA,MACfgR,IACIpC,EACAoC,EAAWnC,MAAM,CAACC,eAAe,IAGjC,EAAA9O,KAAI,SAAc,KAAlBA,KAAmBgR,IAG3BhI,EAAM6H,kBACN,K,CAEJ,IAAK,QAAS,CACV7Q,KAAKgP,SACL,MAAM,SAACJ,GAAY5O,KACnB,GAAI4O,EAAU,CACV,MAAM,eAACR,GAAkBpO,MACxBoO,GAAkB,EAAApO,KAAI,SAAa,KAAjBA,QAAsB6O,MAAM,CAACC,eAAe,G,MAG3DX,GACA,EAAAnO,KAAI,SAAc,KAAlBA,KAAmBmO,GAG3BnF,EAAM6H,kBACN,K,CAEJ,IAAK,SACGjC,IACA5O,KAAK+O,WACL/F,EAAM6H,kBACN7H,EAAMiI,kBAEV,MAEJ,QAAS,CACL,MAAO/M,OAAQgN,GAAa7D,EAC5B,GAAiB,GAAb6D,EAAgB,CAChB,MAAMC,EAAU9D,EAAI+D,WAAW,IACzB,QAACtQ,GAAWd,KACZqR,EAAclD,EAAerN,EAAQkC,QAAQmL,IAAiB,EAC9DmD,EAAiBxQ,EAAQ2N,MAC3B,CAACC,EAAUrD,IAAMqD,EAASoB,MAAM1J,cAAcgL,WAAW,IAAMD,GAAW9F,EAAIgG,KAC7EvQ,EAAQ2N,MACRC,GAAaA,EAASoB,MAAM1J,cAAcgL,WAAW,IAAMD,IAE5DG,GACAA,EAAezC,MAAM,CAACC,eAAe,IAEzC9F,EAAM6H,iB,CAEV,K,EAGZ,EAAC,WAEkB7H,GACf,MAAM,OAACrK,GAAUqK,EACXwH,EAAyB7R,EAAQ8R,QAA4B,YACnE,GAAID,EAAc,CACd,MAAM,SAAC7I,GAAY6I,EACnB,GAAI7I,EAAU,CACV,MAAM,QAAC7G,GAAWd,KAClBc,EAAQY,SAASgN,IACTA,IAAa8B,GAAgB9B,EAAS/G,WACtC+G,EAAS/G,UAAW,E,IAG5B,EAAA3H,KAAI,SAAmB,KAAvBA,KAAwBwQ,E,KAEvB,CACD,MAAM,eAACpC,GAAkBpO,KACzB,GAAuB,OAAnBoO,EAAyB,CACzB,MAAM2C,EAAc,EAAA/Q,KAAI,SAAa,KAAjBA,MACA,OAAhB+Q,GACA,EAAA/Q,KAAI,SAAmB,KAAvBA,KAAwB+Q,E,GAK5C,GAxaI1K,GAAiB,QAAQ,aACVc,QAAQjF,QACnB,QAAQ,MAAO,CACXf,WAAY,CACR6G,KAAM,WAEV3G,SAAU,EACN,QAAQ,SAAU,CACdF,WAAY,CACR6G,KAAM,eAKtB,QAAQ,MAAO,CACX7G,WAAY,CACR6G,KAAM,OAEV3G,UAAU,QAAQ,WAG1BiF,EAAe,4vDA6DfsH,EAAmB,IAAI2D,kBAClBC,IACGA,EAAc9P,SAAS+P,IACnB,MAAM,OAAC9S,GAAU8S,EACXC,EAAiC/S,GACjC,eAACyP,EAAc,MAAExO,EAAK,QAAEkB,GAAW4Q,EACzC,IAAKtD,EAAgB,CACjB,MAAMI,EAAiB5O,EAAQkB,EAAQ2N,MACnCC,GAAYA,EAAS9O,QAAUA,IAC/B,EAAA8R,EAAM,SAAa,KAAnBA,GACAlD,EACAA,EAAe7G,UAAW,EAG1B,EAAA+J,EAAM,SAAmB,KAAzBA,EAA0B,K,IAGpC,IAlHd,IADC,QAAkB,CAAC5R,KAAMd,U,2BAI1B,IADC,QAAkB,CAACc,KAAMd,OAAQE,UAAU,K,4BAI5C,IADC,QAAkB,CAACY,KAAMd,OAAQC,aAAc,SAAUC,UAAU,K,2BAIpE,IADC,QAAkB,CAACY,KAAMC,W,+BAhCxB8N,EAAsB,IAH3B,QAAc,CACX1O,KAAM,cAEJ0O,GAkdN,IAAI8D,EAAoD9D,C","sources":["webpack://editor/./src/elements/Element.ts","webpack://editor/./src/elements/Snippets.ts","webpack://editor/./src/elements/controls/forms/Option.ts","webpack://editor/./src/elements/controls/forms/OptionGroup.ts","webpack://editor/./src/models/Model.ts","webpack://editor/webpack/bootstrap","webpack://editor/webpack/runtime/define property getters","webpack://editor/webpack/runtime/hasOwnProperty shorthand","webpack://editor/./src/elements/controls/forms/Select.ts"],"sourcesContent":["import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { revokeReactiveElement };\r\nexport { reactiveChildElements };\r\nexport { revokeReactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\nexport { reactiveElementsMap };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n        name?: string;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const {defaultValue = null, observed = false, name = camelToTrain(propertyName)} = init;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(name);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [name],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(name);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(name, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                children(element);\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : properties.filter(\r\n                (property_i, i, properties) => properties.indexOf(property_i) === i\r\n            )\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            react(element, <any>property_i, <any>undefined, value);\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\nfunction revokeReactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E\r\n): void {\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        const reactiveElementIndex = reactiveElementsArray.findIndex(\r\n            reactiveElement => reactiveElement.elementRef.deref() === element\r\n        );\r\n        if (reactiveElementIndex > -1) {\r\n            reactiveElementsArray.splice(reactiveElementIndex, 1);\r\n        }\r\n        if (reactiveElementsArray.length === 0) {\r\n            reactiveElementsMap.delete(model);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: ParentNode): void;\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        const children = list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n        parent.replaceChildren(...children);\r\n    }\r\n}\r\n\r\nfunction revokeReactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    parent: ParentNode,\r\n): void {\r\n    const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n        const reactiveChildElementsIndex = reactiveChildElementsArray.findIndex(\r\n            reactiveChildElement => reactiveChildElement.parentRef.deref() === parent\r\n        );\r\n        if (reactiveChildElementsIndex > -1) {\r\n            reactiveChildElementsArray.splice(reactiveChildElementsIndex, 1);\r\n        }\r\n        if (reactiveChildElementsArray.length === 0) {\r\n            reactiveChildElementsMap.delete(list);\r\n        }\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    name: string;\r\n    value: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                line-height: 22px;\r\n                padding: 0 12px;\r\n            }\r\n            \r\n            :host(:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host(:focus-within) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            :host([selected]) {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(::before) {\r\n                display: flex;\r\n                content: \"\";\r\n                width: 18px;\r\n                height: 18px;\r\n                margin-right: 6px;\r\n            \r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--icon-color, none);\r\n                -webkit-mask-image: var(--icon-image, none);\r\n                mask-image: var(--icon-image, none);\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        internals.role = \"option\";\r\n        this.internals = internals;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                const {internals, selected} = this;\r\n                internals.ariaSelected = String(selected);\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            records.splice(0);\r\n        }\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function() {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(item: Model): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model): number {\r\n        return this.#items.indexOf(item);\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get options(): HTMLEOptionElement[];\r\n    get activeOption(): HTMLEOptionElement | null;\r\n    get selectedOption(): HTMLEOptionElement | null;\r\n    name: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar mutationObserver: MutationObserver;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    static get formAssociated(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get options(): HTMLEOptionElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEOptionElement>(\r\n            \"e-option\"\r\n        ));\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option:focus-within\") ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option[selected]\") ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #wasExpandedOnMouseDown: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"box\"\r\n                },\r\n                children: element(\"slot\")\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n                user-select: none;\r\n                line-height: 22px;\r\n                border: 1px solid var(--item-border-color);\r\n            }\r\n\r\n            :host(:focus-visible) {\r\n                outline: none;\r\n            }\r\n            \r\n            :host(:focus-within) {\r\n                background-color: var(--focused-item-color);\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            [part=\"content\"] {\r\n                display: flex;\r\n                overflow: hidden;\r\n                padding: 0 4px;\r\n            }\r\n            \r\n            [part=\"content\"]::after {\r\n                display: inline-block;\r\n                text-align: center;\r\n                width: 22px;\r\n                height: 22px;\r\n                margin-left: 6px;\r\n                content: \"▾\";\r\n            }\r\n            \r\n            [part=\"value\"] {\r\n                margin-right: auto;\r\n                text-align: right;\r\n            }\r\n            \r\n            [part=\"box\"] {\r\n                z-index: 1;\r\n                position: fixed;\r\n            \r\n                display: block;\r\n                padding: 6px 0;\r\n                width: max-content;\r\n            \r\n                background-color: white;\r\n            \r\n                -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n            }\r\n            \r\n            :host(:not([expanded])) [part=\"box\"] {\r\n                opacity: 0;\r\n                pointer-events: none;\r\n            }\r\n        `;\r\n        mutationObserver = new MutationObserver(\r\n            (mutationsList: MutationRecord[]) => {\r\n                mutationsList.forEach((mutation: MutationRecord) => {\r\n                    const {target} = mutation;\r\n                    const select = <HTMLESelectElementBase>target;\r\n                    const {selectedOption, value, options} = select;\r\n                    if (!selectedOption) {\r\n                        const optionToSelect = value ? options.find(\r\n                            option_i => option_i.value === value\r\n                        ) : select.#firstOption();\r\n                        if (optionToSelect) {\r\n                            optionToSelect.selected = true;\r\n                        }\r\n                        else {\r\n                            select.#setSelectedOption(null);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        internals.role = \"combobox\";\r\n        this.internals = internals;\r\n        this.#wasExpandedOnMouseDown = false;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        mutationObserver.observe(\r\n            this, {\r\n                childList: true,\r\n                subtree: true\r\n            }\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {options, selectedOption, value} = this;\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : 0;\r\n        customElements.upgrade(this);\r\n        const optionToSelect = selectedOption ?? (\r\n            value ? options.find(\r\n                option_i => option_i.value === value\r\n            ) : null\r\n        ) ?? this.#firstOption();\r\n        if (optionToSelect) {\r\n            if (optionToSelect === selectedOption) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n            else {\r\n                this.#selectOption(optionToSelect);\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionBox();\r\n            const {selectedOption} = this;\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n    \r\n    #value(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=value]\")!;\r\n    }\r\n\r\n    #box(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=box]\")!;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement && !node.disabled && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        else if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement) {\r\n        const {selectedOption} = this;\r\n        if (option !== selectedOption) {\r\n            option.selected = true;\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(option: HTMLEOptionElement | null) {\r\n        const {label, value} = option ?? {\r\n            label: \"\",\r\n            value: \"\"\r\n        };\r\n        const {internals} = this;\r\n        this.#value().textContent = label;\r\n        internals.setFormValue(value);\r\n    }\r\n\r\n    #positionBox(): void {\r\n        const box = this.#box()\r\n        const {style: optionsStyle} = box;\r\n        const {bottom, left} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const wasExpandedOnMouseDown = this.#wasExpandedOnMouseDown;\r\n        if (!wasExpandedOnMouseDown) {\r\n            const {selectedOption} = this;\r\n            this.expand();\r\n            (selectedOption ?? this.#firstOption() ?? this).focus({preventScroll: true});\r\n        }\r\n        else {\r\n            this.collapse();\r\n            const targetOption = (<HTMLElement>target).closest<HTMLEOptionElement>(\"e-option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin || this === relatedTarget) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(): void {\r\n        const {expanded} = this;\r\n        this.#wasExpandedOnMouseDown = expanded;\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            targetOption.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded, activeOption, selectedOption} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                this.toggle();\r\n                const {expanded} = this;\r\n                if (expanded) {\r\n                    const {selectedOption} = this;\r\n                    (selectedOption ?? this.#firstOption())?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    if (activeOption) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const {options} = this;\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            const {selected} = targetOption;\r\n            if (selected) {\r\n                const {options} = this;\r\n                options.forEach((option_i) => {\r\n                    if (option_i !== targetOption && option_i.selected) {\r\n                        option_i.selected = false;\r\n                    }\r\n                });\r\n                this.#setSelectedOption(targetOption);\r\n            }\r\n            else {\r\n                const {selectedOption} = this;\r\n                if (selectedOption === null) {\r\n                    const firstOption = this.#firstOption();\r\n                    if (firstOption !== null) {\r\n                        this.#setSelectedOption(firstOption);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;"],"names":["AttributeProperty","init","target","property","constructor","prototype","propertyName","String","defaultValue","observed","name","observedAttributes","Reflect","get","Array","isArray","push","Object","defineProperty","value","writable","type","Boolean","this","hasAttribute","set","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","options","customElements","define","element","tagName","attributes","dataset","children","listeners","document","createElement","entries","forEach","attributeName","attributeValue","undefined","toggleAttribute","elementDataset","keys","datasetEntry_i","append","from","name_i","listener_i","addEventListener","reactiveElementsMap","WeakMap","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","splice","indexOf","records","record_i","oldValue","newValue","reactiveElement_i","elementRef","react","properties","deref","includes","reactiveChildElementsMap","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","range","values","length","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","changeType","LIST_INSERT","LIST_REMOVE","LIST_SORT","insertedIndex","insertedItems","insertedItemsArray","map","before","removedIndex","removedItems","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","sortedIndices","childrenArray","filter","index_i","camelToTrain","str","replace","toLowerCase","shadowTemplate","style","HTMLEOptionElementBase","HTMLElement","super","internals","attachInternals","role","shadowRoot","attachShadow","mode","adoptedStylesheet","CSSStyleSheet","adoptedStyleSheets","content","cloneNode","connectedCallback","tabIndex","attributeChangedCallback","labelPart","querySelector","textContent","selected","ariaSelected","dispatchEvent","Event","bubbles","part","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","ModelChangeRecordBase","ModelNodesList","PROPERTY_CHANGE","ModelChangeRecord","items","slice","item","index","ModelEventBase","currentTarget","ModelEventTargetAccessor","setCurrentTarget","event","setTarget","ModelEvent","ModelEventTargetBase","Map","receiveEvent","callbacks","callback_i","callback","removeEventListener","callbackIndex","findIndex","delete","ModelNodeBase","parentNode","setParent","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelObjectBase","ModelObjectPropertiesAccessor","setProperty","getProperty","ModelList","item_i","sort","compareFunction","indexedItems","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","insert","Math","abs","remove","clear","removedItem_i","reference","propertiesFilter","childList","subtree","ModelChangeObserver","observe","references","listener","bind","unobserve","disconnect","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","key","o","enumerable","obj","prop","hasOwnProperty","call","mutationObserver","HTMLESelectElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","formAssociated","querySelectorAll","activeOption","selectedOption","tabindex","parseInt","upgrade","optionToSelect","find","option_i","expand","expanded","focus","preventScroll","collapse","toggle","force","disabled","hidden","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","walker","currentNode","root","lastChild","option","previousNode","nextNode","label","setFormValue","box","optionsStyle","bottom","left","getBoundingClientRect","scrollX","scrollY","window","targetOption","closest","relatedTarget","contains","previousOption","stopPropagation","nextOption","firstOption","lastOption","preventDefault","keyLength","keyCode","charCodeAt","activeIndex","matchingOption","MutationObserver","mutationsList","mutation","select","HTMLESelectElement"],"sourceRoot":""}