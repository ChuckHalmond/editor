{"version":3,"file":"main.js","mappings":"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,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,KACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,KACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,KACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,KACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,KACpBA,EAAoB,KACpBA,EAAoB,KACpBA,EAAoB,IACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB,KACpBA,EAAoB,KACpBA,EAAoB,MACpBA,EAAoB,MACMA,EAAoB,I","sources":["webpack://editor/webpack/runtime/create fake namespace object","webpack://editor/./src/Input.ts","webpack://editor/./src/elements/Element.ts","webpack://editor/./src/elements/Snippets.ts","webpack://editor/./src/elements/containers/grid/Grid.ts","webpack://editor/./src/elements/containers/grid/GridBody.ts","webpack://editor/./src/elements/containers/grid/GridCell.ts","webpack://editor/./src/elements/containers/grid/GridHead.ts","webpack://editor/./src/elements/containers/grid/GridRow.ts","webpack://editor/./src/elements/containers/grid/GridRowGroup.ts","webpack://editor/./src/elements/containers/lists/List.ts","webpack://editor/./src/elements/containers/lists/ListItem.ts","webpack://editor/./src/elements/containers/lists/ListItemGroup.ts","webpack://editor/./src/elements/containers/menus/Menu.ts","webpack://editor/./src/elements/containers/menus/MenuBar.ts","webpack://editor/./src/elements/containers/menus/MenuButton.ts","webpack://editor/./src/elements/containers/menus/MenuItem.ts","webpack://editor/./src/elements/containers/menus/MenuItemGroup.ts","webpack://editor/./src/elements/containers/status/StatusBar.ts","webpack://editor/./src/elements/containers/status/StatusItem.ts","webpack://editor/./src/elements/containers/status/StatusItemGroup.ts","webpack://editor/./src/elements/containers/tabs/Tab.ts","webpack://editor/./src/elements/containers/tabs/TabList.ts","webpack://editor/./src/elements/containers/tabs/TabPanel.ts","webpack://editor/./src/elements/containers/toolbars/ToolBar.ts","webpack://editor/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://editor/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://editor/./src/elements/containers/trees/Tree.ts","webpack://editor/./src/elements/containers/trees/TreeItem.ts","webpack://editor/./src/elements/containers/trees/TreeItemGroup.ts","webpack://editor/./src/elements/controls/dialogs/Dialog.ts","webpack://editor/./src/elements/controls/draggable/Draggable.ts","webpack://editor/./src/elements/controls/draggable/Dragzone.ts","webpack://editor/./src/elements/controls/draggable/Dropzone.ts","webpack://editor/./src/elements/controls/forms/Option.ts","webpack://editor/./src/elements/controls/forms/OptionGroup.ts","webpack://editor/./src/elements/controls/forms/Select.ts","webpack://editor/./src/elements/misc/Handle.ts","webpack://editor/./src/elements/misc/HeightSash.ts","webpack://editor/./src/elements/misc/Import.ts","webpack://editor/./src/elements/misc/Loader.ts","webpack://editor/./src/elements/misc/Separator.ts","webpack://editor/./src/elements/misc/ToolTip.ts","webpack://editor/./src/elements/misc/WidthSash.ts","webpack://editor/./src/models/Model.ts","webpack://editor/./src/observers/NodeCollection.ts","webpack://editor/./src/stylesheets/Theme.ts","webpack://editor/./src/views/GridView.ts","webpack://editor/./src/views/MenuView.ts","webpack://editor/./src/views/TreeView.ts","webpack://editor/./src/views/View.ts","webpack://editor/./src/views/widgets/HeightSashWidget.ts","webpack://editor/./src/views/widgets/SeparatorWidget.ts","webpack://editor/./src/views/widgets/Widget.ts","webpack://editor/./src/views/widgets/WidthSashWidget.ts","webpack://editor/./src/views/widgets/combobox/ComboboxWidget.ts","webpack://editor/./src/views/widgets/combobox/OptionGroupWidget.ts","webpack://editor/./src/views/widgets/combobox/OptionWidget.ts","webpack://editor/./src/views/widgets/grid/GridBodyWidget.ts","webpack://editor/./src/views/widgets/grid/GridCellWidget.ts","webpack://editor/./src/views/widgets/grid/GridHeadWidget.ts","webpack://editor/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://editor/./src/views/widgets/grid/GridRowWidget.ts","webpack://editor/./src/views/widgets/grid/GridWidget.ts","webpack://editor/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://editor/./src/views/widgets/list/ListItemWidget.ts","webpack://editor/./src/views/widgets/list/ListWidget.ts","webpack://editor/./src/views/widgets/menu/MenuBarWidget.ts","webpack://editor/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://editor/./src/views/widgets/menu/MenuItemWidget.ts","webpack://editor/./src/views/widgets/menu/MenuWidget.ts","webpack://editor/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://editor/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://editor/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://editor/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://editor/./src/views/widgets/tree/TreeItemWidget.ts","webpack://editor/./src/views/widgets/tree/TreeWidget.ts","webpack://editor/webpack/bootstrap","webpack://editor/webpack/runtime/define property getters","webpack://editor/webpack/runtime/global","webpack://editor/webpack/runtime/hasOwnProperty shorthand","webpack://editor/webpack/runtime/make namespace object","webpack://editor/webpack/runtime/publicPath","webpack://editor/webpack/startup"],"sourcesContent":["var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { revokeReactiveElement };\r\nexport { reactiveChildElements };\r\nexport { revokeReactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\nexport { reactiveElementsMap };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n        name?: string;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const {defaultValue = null, observed = false, name = camelToTrain(propertyName)} = init;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(name);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [name],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(name);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(name, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                children(element);\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : properties.filter(\r\n                (property_i, i, properties) => properties.indexOf(property_i) === i\r\n            )\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            react(element, <any>property_i, <any>undefined, value);\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\nfunction revokeReactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E\r\n): void {\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        const reactiveElementIndex = reactiveElementsArray.findIndex(\r\n            reactiveElement => reactiveElement.elementRef.deref() === element\r\n        );\r\n        if (reactiveElementIndex > -1) {\r\n            reactiveElementsArray.splice(reactiveElementIndex, 1);\r\n        }\r\n        if (reactiveElementsArray.length === 0) {\r\n            reactiveElementsMap.delete(model);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: ParentNode): void;\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        const children = list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n        parent.replaceChildren(...children);\r\n    }\r\n}\r\n\r\nfunction revokeReactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    parent: ParentNode,\r\n): void {\r\n    const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n        const reactiveChildElementsIndex = reactiveChildElementsArray.findIndex(\r\n            reactiveChildElement => reactiveChildElement.parentRef.deref() === parent\r\n        );\r\n        if (reactiveChildElementsIndex > -1) {\r\n            reactiveChildElementsArray.splice(reactiveChildElementsIndex, 1);\r\n        }\r\n        if (reactiveChildElementsArray.length === 0) {\r\n            reactiveChildElementsMap.delete(list);\r\n        }\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    multiselectable: boolean;\r\n    cells(): HTMLEGridCellElement[];\r\n    rows(): HTMLEGridRowElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    cells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridCellElement>(\r\n            \"e-gridcell\"\r\n        ));\r\n    }\r\n\r\n    rows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridRowElement>(\r\n            \"e-gridrow\"\r\n        ));\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.querySelector<HTMLEGridCellElement>(\"e-gridcell[active]\");\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.querySelector<HTMLEGridRowElement>(\"e-gridrow[active]\");\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiselectable!: boolean;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table;\r\n                user-select: none;\r\n                line-height: 22px;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement || node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = closestRow.cells();\r\n            const cellIndex = closestRowCells.indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = previousRow.cells();\r\n                return previousRowCells[\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                ];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = closestRow.cells();\r\n            const cellIndex = closestRowCells.indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = nextRow.cells();\r\n                return nextRowCells[\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                ];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLEGridCellElement>(\"e-gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLEGridRowElement>(\"e-gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    cells(): HTMLEGridCellElement[];\r\n    rows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    cells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridCellElement>(\r\n            \"e-gridcell\"\r\n        ));\r\n    }\r\n\r\n    rows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridRowElement>(\r\n            \"e-gridrow\"\r\n        ));\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-row-group;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-cell;\r\n                text-align: left;\r\n            }\r\n            \r\n            :host([type=\"columnheader\"]:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host(:hover):host-context(e-grid:is(:not([selectby]), [selectby=\"cell\"])) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([type=\"columnheader\"][active]) {\r\n                background-color: var(--focused-item-color);\r\n            }\r\n            \r\n            :host([active]):host-context(e-grid:focus-within:is(:not([selectby]), [selectby=\"cell\"])) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n\r\n            :host(:focus-visible):host-context(e-grid:focus-within:is([selectby=\"row\"])) {\r\n                outline: none;\r\n            }\r\n            \r\n            :host([selected]):host-context(e-grid:is(:not([selectby]), [selectby=\"cell\"])) {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    cells(): HTMLEGridCellElement[];\r\n    rows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    cells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridCellElement>(\r\n            \"e-gridcell\"\r\n        ));\r\n    }\r\n\r\n    rows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridRowElement>(\r\n            \"e-gridrow\"\r\n        ));\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-row-group;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n    cells(): HTMLEGridCellElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    cells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridCellElement>(\"e-gridcell\"));\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-row;\r\n            }\r\n            \r\n            :host(:hover):host-context(e-grid:is([selectby=\"row\"])) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([active]):host-context(e-grid:focus-within:is([selectby=\"row\"])) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            :host([selected]):host-context(e-grid:is([selectby=\"row\"])) {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedCells.forEach((cell_i, i) => {\r\n            cell_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-row-group;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly dropTargetItem: HTMLEListItemElement | null;\r\n    name: string;\r\n    droptarget: boolean;\r\n    items(): HTMLEListItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.querySelector<HTMLEListItemElement>(\r\n            \"e-listitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.querySelector<HTMLEListItemElement>(\r\n            \"e-listitem[droptarget]\"\r\n        );\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    items(): HTMLEListItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEListItemElement>(\r\n            \":is(:scope, :scope > e-listitemgroup) > e-listitem\"\r\n        ));\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabIndex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabIndex === null ? 0 : parseInt(tabIndex);\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = this.items();\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        let rootNode = <Node>relatedTarget;\r\n        while (!(rootNode instanceof HTMLEListItemElement || rootNode instanceof Document)) {\r\n            rootNode = rootNode.getRootNode();\r\n            if (rootNode instanceof ShadowRoot) {\r\n                rootNode = rootNode.host;\r\n            }\r\n        }\r\n        if (rootNode instanceof Document) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                line-height: 22px;\r\n            }\r\n            \r\n            :host([droptarget]) {\r\n                background-color: var(--droptarget-item-color);\r\n            }\r\n            \r\n            :host(:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([active]) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                background-color: var(--focus-background-color);\r\n            }\r\n            \r\n            :host([selected]) {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    firstItem(): HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    connectedCallback(): void;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar toggleAnimations: WeakMap<HTMLEMenuItemElement, Animation>;\r\nvar HIDE_DELAY_MS = 200;\r\nvar SHOW_DELAY_MS = 400;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: column;\r\n            \r\n                padding: 3px;\r\n                background-color: white;\r\n                width: max-content;\r\n                box-sizing: border-box;\r\n            \r\n                -webkit-box-shadow: var(--menu-box-shadow);\r\n                box-shadow: var(--menu-box-shadow);\r\n            }\r\n            \r\n            :host([contextual]) {\r\n                z-index: 1;\r\n                position: absolute;\r\n            \r\n                transition-property: opacity;\r\n                transition-duration: 0.2s;\r\n                opacity: 0;\r\n            }\r\n            \r\n            :host([contextual]:focus-within) {\r\n                opacity: 1;\r\n            }\r\n        `;\r\n        toggleAnimations = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n    \r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n    \r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n        if (targetItem) {\r\n            const {type, checked} = targetItem;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    targetItem.checked = !checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    const {name, value} = targetItem;\r\n                    targetItem.checked = true;\r\n                    this.querySelectorAll<HTMLEMenuItemElement>(\r\n                        `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                    )\r\n                    .forEach((radio_i) => {\r\n                        radio_i.checked = radio_i.value == value;\r\n                    });\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    targetItem.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() :\r\n                    this.firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menu\":\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                    else {\r\n                        const {contextual} = this;\r\n                        if (contextual) {\r\n                            this.blur();\r\n                            this.dispatchEvent(new Event(\"close\", {bubbles: true}));\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    toggleAnimations.get(nearestItem)?.cancel();\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        let toggleAnimation = toggleAnimations.get(activeItem);\r\n                        if (toggleAnimation) {\r\n                            toggleAnimation.cancel();\r\n                        }\r\n                        toggleAnimation = activeItem.animate(null, {\r\n                            duration: HIDE_DELAY_MS\r\n                        });\r\n                        toggleAnimations.set(activeItem, toggleAnimation);\r\n                        const {finished} = toggleAnimation;\r\n                        finished\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined)\r\n                            .finally(() => {\r\n                                toggleAnimations.delete(activeItem);\r\n                            });\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type === \"submenu\" && nearestItem.expanded) {\r\n                    toggleAnimations.get(nearestItem)?.cancel();\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type === \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        let toggleAnimation = toggleAnimations.get(activeItem);\r\n                        if (toggleAnimation) {\r\n                            toggleAnimation.cancel();\r\n                        }\r\n                        toggleAnimation = activeItem.animate(null, {\r\n                            duration: SHOW_DELAY_MS\r\n                        });\r\n                        toggleAnimations.set(activeItem, toggleAnimation);\r\n                        const {finished} = toggleAnimation;\r\n                        finished\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined)\r\n                            .finally(() => {\r\n                                toggleAnimations.delete(activeItem);\r\n                            });\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type === \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            let toggleAnimation = toggleAnimations.get(nearestItem);\r\n                            if (toggleAnimation) {\r\n                                toggleAnimation.cancel();\r\n                            }\r\n                            toggleAnimation = nearestItem.animate(null, {\r\n                                duration: HIDE_DELAY_MS\r\n                            });\r\n                            toggleAnimations.set(nearestItem, toggleAnimation);\r\n                            const {finished} = toggleAnimation;\r\n                            finished\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        toggleAnimations.get(activeItem)?.cancel();\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined)\r\n                                .finally(() => {\r\n                                    toggleAnimations.delete(nearestItem);\r\n                                });\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: row;\r\n                width: max-content;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement && !(node.disabled || node.hidden)) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.blur();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    if (!expanded) {\r\n                        const firstChildItem = this.#firstChildItem(activeItem);\r\n                        firstChildItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    connectedCallback(): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu] e-menuitem\"})\r\n    readonly firstItem!: HTMLEMenuItemElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n                padding: 2px;\r\n                line-height: 18px;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                cursor: pointer;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            :host(:focus-within:not(:focus)) {\r\n                background-color: var(--focused-item-color);\r\n            }\r\n            \r\n            :host(:hover:not(:focus-within)) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                color: lightgray;\r\n            }\r\n            \r\n            ::slotted([slot=\"menu\"]) {\r\n                z-index: 1;\r\n                position: absolute;\r\n                color: initial;\r\n            }\r\n            \r\n            :host(:not([expanded])) ::slotted([slot=\"menu\"]) {\r\n                opacity: 0;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host::after {\r\n                display: inline-block;\r\n                text-align: center;\r\n                width: 18px;\r\n                height: 18px;\r\n                content: \"▾\";\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            let {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const offsetParent = <HTMLElement>(menu.offsetParent ?? document.body);\r\n            const {offsetLeft, offsetTop} = offsetParent;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            itemLeft -= offsetLeft;\r\n            itemRight -= offsetLeft;\r\n            itemTop -= offsetTop;\r\n            itemBottom -= offsetTop;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                itemRight - menuWidth :\r\n                itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                itemTop - menuHeight :\r\n                itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {menu} = this;\r\n        if (menu && !menu.contains(<Node>target)) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get menu(): HTMLEMenuElement | null;\r\n    name: string;\r\n    label: string | null;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    menu!: HTMLEMenuElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    overflown!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                box-sizing: border-box;\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(:focus-within) {\r\n                background-color: var(--focused-item-color);\r\n            }\r\n\r\n            :host(:focus-visible) {\r\n                outline: none;\r\n            }\r\n            \r\n            :host(:is([type=\"menu\"], [type=\"submenu\"])) ::slotted([slot=\"menu\"]) {\r\n                z-index: 1;\r\n                position: absolute;\r\n            }\r\n            \r\n            :host(:is([type=\"menu\"], [type=\"submenu\"]):not([expanded])) ::slotted([slot=\"menu\"]) {\r\n                opacity: 0;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host([type=\"submenu\"]) [part=\"icon\"] {\r\n                visibility: hidden;\r\n            }\r\n            \r\n            :host([type=\"menu\"]) [part=\"icon\"],\r\n            :host(:not([type=\"submenu\"])) [part=\"arrow\"] {\r\n                display: none;\r\n            }\r\n            \r\n            :host(:is([type=\"checkbox\"], [type=\"radio\"])[checked]) {\r\n                --icon-color: black;\r\n                --icon-image: url(\"/assets/done_FILL0_wght400_GRAD0_opsz48.svg\");\r\n            }\r\n            \r\n            :host([type=\"submenu\"]) {\r\n                --arrow-color: black;\r\n                --arrow-image: url(\"/assets/arrow_right_FILL0_wght400_GRAD0_opsz48.svg\");\r\n            }\r\n            \r\n            [part=\"icon\"],\r\n            [part=\"label\"],\r\n            [part=\"arrow\"] {\r\n                pointer-events: none;\r\n            }\r\n            \r\n            [part=\"icon\"] {\r\n                flex: none;\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                padding: 2px;\r\n                overflow: hidden;\r\n                margin-right: 4px;\r\n            }\r\n            \r\n            [part=\"label\"] {\r\n                flex: auto;\r\n                line-height: 18px;\r\n                padding: 2px;\r\n                margin-left: 8px;\r\n                margin-right: 8px;\r\n            }\r\n            \r\n            :host(:is(:not([type]), [type=\"button\"], [type=\"radio\"], [type=\"checkbox\"])[checked]) [part=\"icon\"] {\r\n                background-color: var(--activated-item-color);\r\n            }\r\n            \r\n            :host(:is(:not([type]), [type=\"button\"], [type=\"radio\"], [type=\"checkbox\"])) [part=\"icon\"]::before {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--icon-color, none);\r\n                -webkit-mask-image: var(--icon-image, none);\r\n                mask-image: var(--icon-image, none);\r\n                filter: var(--icon-filter, none);\r\n            }\r\n            \r\n            [part=\"arrow\"] {\r\n                flex: none;\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px 4px 1px 1px;\r\n            }\r\n            \r\n            [part=\"arrow\"]::after {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--arrow-color, none);\r\n                -webkit-mask-image: var(--arrow-image, none);\r\n                mask-image: var(--arrow-image, none);\r\n                filter: var(--arrow-filter, none);\r\n            }\r\n\r\n            :host(:hover):host-context(e-menubar:focus),\r\n            :host(:hover):host-context(e-menubar:not(:focus-within)) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        this.internals = internals;\r\n        internals.role = \"menuitem\";\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null): void {\r\n        const {internals} = this;\r\n        switch (attributeName) {\r\n            case \"type\": {\r\n                switch (newValue) {\r\n                    case \"checkbox\":\r\n                    case \"radio\": {\r\n                        internals.role = `menuitem${newValue}`;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        internals.role = \"menuitem\";\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"checked\": {\r\n                internals.ariaChecked = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                internals.ariaDisabled = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"expanded\": {\r\n                internals.ariaExpanded = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            let {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type === \"menu\") {\r\n                const offsetParent = <HTMLElement>(menu.offsetParent ?? document.body);\r\n                const {offsetLeft, offsetTop} = offsetParent;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                itemLeft -= offsetLeft;\r\n                itemRight -= offsetLeft;\r\n                itemTop -= offsetTop;\r\n                itemBottom -= offsetTop;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    itemRight - menuWidth :\r\n                    itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    itemTop - menuHeight  :\r\n                    itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    itemLeft -= closestMenuLeft;\r\n                    itemRight -= closestMenuLeft;\r\n                    itemTop -= closestMenuTop;\r\n                    itemBottom -= closestMenuTop;\r\n                }\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    itemLeft - menuWidth :\r\n                    itemRight\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    itemBottom - menuHeight :\r\n                    itemTop\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                click: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name?: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: column;\r\n            }\r\n            \r\n            [part=\"label\"] {\r\n                font-weight: bold;\r\n            }\r\n            \r\n            :host([label]) [part=\"label\"] {\r\n                padding-bottom: 6px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        const internals = this.attachInternals();\r\n        internals.role = \"group\";\r\n        this.internals = internals;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        const {internals} = this;\r\n        switch (name) {\r\n            case \"label\":\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEStatusItemElement } from \"./StatusItem\";\r\nimport { HTMLEStatusItemGroupElement } from \"./StatusItemGroup\";\r\n\r\nexport { HTMLEStatusBarElement };\r\n\r\n\r\ninterface HTMLEStatusBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEStatusItemElement | null;\r\n    items(): HTMLEStatusItemElement[];\r\n    firstItem(): HTMLEStatusItemElement | null;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEStatusBarElement;\r\n    new(): HTMLEStatusBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-statusbar\": HTMLEStatusBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-statusbar\"\r\n})\r\nclass HTMLEStatusBarElementBase extends HTMLElement implements HTMLEStatusBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEStatusItemElement | null {\r\n        return this.querySelector<HTMLEStatusItemElement>(\r\n            \"e-statusitem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEStatusItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEStatusItemElement>(\r\n            \":is(:scope, :scope > e-statusitemgroup) > e-statusitem\"\r\n        ));\r\n    }\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: row;\r\n            }\r\n\r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n\r\n            ::slotted(e-statusitem:not(:first-child)) {\r\n                margin-left: 4px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEStatusItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEStatusItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEStatusItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEStatusItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEStatusItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEStatusItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEStatusItemElement): HTMLEStatusItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEStatusItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEStatusItemElement): HTMLEStatusItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEStatusItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEStatusItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLEStatusItemElement | null>(<HTMLElement>target).closest(\"e-statusitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    activeItem.click();\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEStatusBarElement: HTMLEToolbarElementConstructor = HTMLEStatusBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEStatusItemElement };\r\nexport { EStatusItem };\r\n\r\ninterface HTMLEStatusItemElementConstructor {\r\n    prototype: HTMLEStatusItemElement;\r\n    new(): HTMLEStatusItemElement;\r\n}\r\n\r\ninterface HTMLEStatusItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    active: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-statusitem\": HTMLEStatusItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-statusitem\"\r\n})\r\nclass HTMLEStatusItemElementBase extends HTMLElement implements HTMLEStatusItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: element(\"slot\")\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                cursor: pointer;\r\n                line-height: 22px;\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host(:focus-within):host-context(e-statusbar:focus-within) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            [part=\"content\"] {\r\n                padding: 0 4px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n}\r\n\r\nvar HTMLEStatusItemElement: HTMLEStatusItemElementConstructor = HTMLEStatusItemElementBase;\r\n\r\ninterface EStatusItemConstructor {\r\n    prototype: HTMLEStatusItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        onclick?: () => void;\r\n    }): HTMLEStatusItemElement;\r\n}\r\n\r\nvar EStatusItem = <EStatusItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        onclick?: () => void;\r\n    }) {\r\n        const {label, name, onclick} = init;\r\n        return element(\"e-statusitem\", {\r\n            attributes: {\r\n                title: label,\r\n                name: name,\r\n            },\r\n            children: label,\r\n            listeners: {\r\n                click: onclick\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEStatusItemElement.prototype\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEStatusItemGroupElement };\r\n\r\ninterface HTMLEStatusItemGroupElementConstructor {\r\n    prototype: HTMLEStatusItemGroupElement;\r\n    new(): HTMLEStatusItemGroupElement;\r\n}\r\n\r\ninterface HTMLEStatusItemGroupElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-statusitemgroup\": HTMLEStatusItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-statusitemgroup\"\r\n})\r\nclass HTMLEStatusItemGroupElementBase extends HTMLElement implements HTMLEStatusItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                width: max-content;\r\n                flex-direction: row;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEStatusItemGroupElement: HTMLEStatusItemGroupElementConstructor = HTMLEStatusItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    get panel(): HTMLETabPanelElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    selected: boolean;\r\n    select(): void;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n    \r\n    get panel(): HTMLETabPanelElement | null {\r\n        const {controls} = this;\r\n        return (<Document | ShadowRoot>this.getRootNode()).querySelector<HTMLETabPanelElement>(`e-tabpanel[id='${controls}']`);\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                padding: 4px;\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host(:focus-visible):host-context(e-tablist:focus-within) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    select(): void {\r\n        this.selected = true;\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    get activeTab(): HTMLETabElement | null;\r\n    get selectedTab(): HTMLETabElement | null;\r\n    get tabs(): HTMLETabElement[];\r\n    firstItem(): HTMLETabElement | null;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar SELECT_ANIMATION_DURATION = 300;\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    #walker: TreeWalker;\r\n    \r\n    get tabs(): HTMLETabElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\"e-tab\")\r\n        );\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.querySelector(\r\n            \"e-tab[active]\"\r\n        );\r\n    }\r\n\r\n    get selectedTab(): HTMLETabElement | null {\r\n        return this.querySelector(\r\n            \"e-tab[selected]\"\r\n        );\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n            }\r\n\r\n            :host::after {\r\n                position: absolute;\r\n                display: inline-block;\r\n                content: \" \";\r\n                transform: translateY(-100%);\r\n                box-sizing: border-box;\r\n                border-top: 2px solid var(--focused-item-outline-color);\r\n            }\r\n\r\n            ::slotted(e-tab) {\r\n                transform: translateY(1px);\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex, selectedTab} = this;\r\n        this.tabIndex = tabIndex;\r\n        customElements.upgrade(this);\r\n        const tabToSelect = selectedTab ?? this.firstItem();\r\n        if (tabToSelect) {\r\n            this.#selectTab(tabToSelect);\r\n            setTimeout(() => {\r\n                let {width: tabWidth, left: tabLeft, bottom: tabBottom} = tabToSelect.getBoundingClientRect();\r\n                const offsetParent = <HTMLElement>(tabToSelect.offsetParent ?? document.body);\r\n                const {offsetLeft, offsetTop} = offsetParent;\r\n                tabLeft -= offsetLeft;\r\n                tabBottom -= offsetTop;\r\n                this.animate([{\r\n                    width: `${tabWidth}px`,\r\n                    left: `${tabLeft}px`,\r\n                    top: `${tabBottom}px`\r\n                }], {\r\n                    duration: 0,\r\n                    fill: \"forwards\",\r\n                    easing: \"ease-in-out\",\r\n                    pseudoElement: \"::after\"\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETabElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLETabElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLETabElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETabElement): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLETabElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETabElement): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLETabElement | null>walker.nextNode();\r\n    }\r\n\r\n    #setActiveTab(item: HTMLETabElement | null): void {\r\n        const {activeTab} = this;\r\n        if (activeTab !== null && activeTab !== item) {\r\n            activeTab.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #selectTab(tab: HTMLETabElement) {\r\n        const {selectedTab} = this;\r\n        if (tab !== selectedTab) {\r\n            tab.selected = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetTab = (<Element>target).closest(\"e-tab\");\r\n        if (targetTab) {\r\n            targetTab.select();\r\n            const {width: tabWidth, left: tabLeft, bottom: tabBottom} = targetTab.getBoundingClientRect();\r\n            const {left: dialogLeft, top: dialogTop} = this.closest(\"dialog\")?.getBoundingClientRect() ?? {left: 0, top: 0};\r\n            this.animate([{\r\n                width: `${tabWidth}px`,\r\n                left: `${tabLeft - dialogLeft}px`,\r\n                top: `${tabBottom - dialogTop}px`\r\n            }], {\r\n                duration: SELECT_ANIMATION_DURATION,\r\n                fill: \"forwards\",\r\n                easing: \"ease-in-out\",\r\n                pseudoElement: \"::after\"\r\n            });\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectedTab} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (selectedTab ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetTab = <HTMLETabElement | null>(<HTMLElement>target).closest(\"e-tab\");\r\n        if (targetTab) {\r\n            this.#setActiveTab(targetTab);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeTab} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousTab = activeTab ?\r\n                    this.#previousItem(activeTab) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousTab?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextTab = activeTab ?\r\n                    this.#nextItem(activeTab) ?? this.firstItem() :\r\n                    this.#lastItem();\r\n                nextTab?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                activeTab?.click();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event) {\r\n        const {target} = event;\r\n        const targetTab = <HTMLETabElement>target;\r\n        if (targetTab.selected) {\r\n            const {tabs} = this;\r\n            tabs.forEach((tab_i) => {\r\n                if (tab_i !== targetTab) {\r\n                    tab_i.selected = false;\r\n                    const {panel} = tab_i;\r\n                    if (panel) {\r\n                        panel.hidden = true;\r\n                    }\r\n                }\r\n            });\r\n            const {panel} = targetTab;\r\n            if (panel) {\r\n                panel.hidden = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    get tab(): HTMLETabElement | null;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    get tab(): HTMLETabElement | null {\r\n        const {id} = this;\r\n        return (<Document | ShadowRoot>this.getRootNode()).querySelector<HTMLETabElement>(`e-tab[controls=${id}]`);\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                padding: 4px;\r\n            }\r\n            \r\n            :host([hidden]) {\r\n                display: none;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tab} = this;\r\n        if (tab) {\r\n            customElements.upgrade(tab);\r\n            const {selected} = tab;\r\n            this.hidden = !selected;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    items(): HTMLEToolBarItemElement[];\r\n    firstItem(): HTMLEToolBarItemElement | null;\r\n    name: string;\r\n    orientation: ToolBarOrientation;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar wasExpandedOnMouseDown: WeakMap<HTMLEToolBarItemElement, boolean>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        wasExpandedOnMouseDown = new WeakMap();\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: row;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            const {type, pressed} = targetItem;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    targetItem.pressed = !pressed;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    targetItem.pressed = true;\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const {menubutton} = targetItem;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        const force = !wasExpandedOnMouseDown.get(targetItem) ?? true;\r\n                        menubutton.toggle(force);\r\n                        if (force) {\r\n                            menubutton.firstItem?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = targetItem;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        const force = !wasExpandedOnMouseDown.get(targetItem) ?? true;\r\n                        select.toggle(force);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLEToolBarItemElement | null>(<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            const {type} = targetItem;\r\n            switch (type) {\r\n                case \"menubutton\": {\r\n                    const {menubutton} = targetItem;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        wasExpandedOnMouseDown.set(targetItem, menubutton.expanded);\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = targetItem;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        wasExpandedOnMouseDown.set(targetItem, select.expanded);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                menubutton.expand();\r\n                                menubutton.firstItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    value: string;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    pressed: boolean;\r\n    iconed: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar iconPart: HTMLElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @QueryProperty({selector: \":scope > e-menubutton[slot=menubutton]\"})\r\n    readonly menubutton!: HTMLEMenuButtonElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-select[slot=select]\"})\r\n    readonly select!: HTMLESelectElement | null;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    pressed!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    iconed!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"select\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menubutton\"\r\n                }\r\n            })\r\n        );\r\n        iconPart = element(\"span\", {\r\n            attributes: {\r\n                part: \"icon\"\r\n            }\r\n        });\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                cursor: pointer;\r\n                line-height: 22px;\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([pressed]) {\r\n                background-color: var(--activated-item-color);\r\n            }\r\n            \r\n            :host(:not([iconed])) [part=\"icon\"] {\r\n                display: none;\r\n            }\r\n\r\n            [part=\"icon\"] {\r\n                flex: none;\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                padding: 2px;\r\n                overflow: hidden;\r\n            }\r\n            \r\n            [part=\"icon\"]::before {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--icon-color, none);\r\n                -webkit-mask-image: var(--icon-image, none);\r\n                mask-image: var(--icon-image, none);\r\n                filter: var(--icon-filter, none);\r\n            }\r\n            \r\n            :host(:focus-within):host-context(e-toolbar:focus-within) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            /*:host([type=\"menubutton\"]) ::slotted(e-menubutton):focus,\r\n            :host([type=\"select\"]) ::slotted(e-select):focus {\r\n                outline: none;\r\n                outline-offset: none;\r\n            }*/\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                //...\r\n                break;\r\n            }\r\n            case \"iconed\": {\r\n                const {shadowRoot} = this;\r\n                if (newValue !== null) {\r\n                    shadowRoot.prepend(iconPart.cloneNode(true));\r\n                }\r\n                else {\r\n                    const iconPart = shadowRoot.querySelector<HTMLElement>(\"[part=icon]\");\r\n                    if (iconPart) {\r\n                        iconPart.remove();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                click: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                width: max-content;\r\n                flex-direction: row;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    firstItem(): HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(targetItem);\r\n                const {type} = targetItem;\r\n                if (type == \"parent\") {\r\n                    targetItem.toggle();\r\n                }\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const {type} = targetItem;\r\n            if (type == \"parent\") {\r\n                targetItem.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        let rootNode = <Node>relatedTarget;\r\n        while (!(rootNode instanceof HTMLETreeItemElement || rootNode instanceof Document)) {\r\n            rootNode = rootNode.getRootNode();\r\n            if (rootNode instanceof ShadowRoot) {\r\n                rootNode = rootNode.host;\r\n            }\r\n        }\r\n        if (rootNode instanceof Document) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? this, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? this, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node | null>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey && !selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty, QueryProperty } from \"../../Element\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\nimport { themeStylesheet } from \"../../../stylesheets/Theme\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    @QueryProperty({selector: \":scope > e-treeitemgroup[slot=group]\"})\r\n    group!: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                user-select: none;\r\n            }\r\n            \r\n            :host([droptarget]) {\r\n                background-color: var(--droptarget-item-color);\r\n            }\r\n            \r\n            :host([active]:focus-visible) {\r\n                outline: none;\r\n            }\r\n            \r\n            :host([active]:is(:focus, :not(:focus-within))):host-context(e-tree:focus-within) [part=\"content\"] {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            [part=\"content\"]:hover {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([selected]) [part=\"content\"] {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n            \r\n            [part=\"content\"] {\r\n                display: flex;\r\n                line-height: 22px;\r\n                padding-left: calc(var(--level) * var(--indent-width, 12px));\r\n            }\r\n            \r\n            :host(:not([type=\"parent\"])) ::slotted([slot=\"group\"]),\r\n            :host(:not([expanded])) ::slotted([slot=\"group\"]) {\r\n                display: none;\r\n            }\r\n            \r\n            :host(:not([type=\"parent\"])) [part=\"arrow\"]::before {\r\n                visibility: hidden;\r\n            }\r\n            \r\n            [part=\"arrow\"] {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px 4px 1px 1px;\r\n            }\r\n            \r\n            [part=\"arrow\"]::before {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--arrow-color, none);\r\n                filter: var(--arrow-filter, none);\r\n            }\r\n            \r\n            :host(:not([expanded])) [part=\"arrow\"]::before {\r\n                -webkit-mask-image: var(--arrow-icon-collapsed, none);\r\n                mask-image: var(--arrow-icon-collapsed, none);\r\n            }\r\n            \r\n            :host([expanded]) [part=\"arrow\"]::before {\r\n                -webkit-mask-image: var(--arrow-icon-expanded, none);\r\n                mask-image: var(--arrow-icon-expanded, none);\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet, themeStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        this.expanded = force ?? !expanded;\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    name: string;\r\n    value: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                line-height: 22px;\r\n                padding: 0 12px;\r\n            }\r\n            \r\n            :host(:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host(:focus-within) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            :host([selected]) {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(::before) {\r\n                display: flex;\r\n                content: \"\";\r\n                width: 18px;\r\n                height: 18px;\r\n                margin-right: 6px;\r\n            \r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--icon-color, none);\r\n                -webkit-mask-image: var(--icon-image, none);\r\n                mask-image: var(--icon-image, none);\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        internals.role = \"option\";\r\n        this.internals = internals;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                const {internals, selected} = this;\r\n                internals.ariaSelected = String(selected);\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get options(): HTMLEOptionElement[];\r\n    get activeOption(): HTMLEOptionElement | null;\r\n    get selectedOption(): HTMLEOptionElement | null;\r\n    name: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar mutationObserver: MutationObserver;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    static get formAssociated(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get options(): HTMLEOptionElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEOptionElement>(\r\n            \"e-option\"\r\n        ));\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option:focus-within\") ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option[selected]\") ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #wasExpandedOnMouseDown: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"box\"\r\n                },\r\n                children: element(\"slot\")\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n                user-select: none;\r\n                line-height: 22px;\r\n                border: 1px solid var(--item-border-color);\r\n            }\r\n\r\n            :host(:focus-visible) {\r\n                outline: none;\r\n            }\r\n            \r\n            :host(:focus-within) {\r\n                background-color: var(--focused-item-color);\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            [part=\"content\"] {\r\n                display: flex;\r\n                overflow: hidden;\r\n                padding: 0 4px;\r\n            }\r\n            \r\n            [part=\"content\"]::after {\r\n                display: inline-block;\r\n                text-align: center;\r\n                width: 22px;\r\n                height: 22px;\r\n                margin-left: 6px;\r\n                content: \"▾\";\r\n            }\r\n            \r\n            [part=\"value\"] {\r\n                margin-right: auto;\r\n                text-align: right;\r\n            }\r\n            \r\n            [part=\"box\"] {\r\n                z-index: 1;\r\n                position: fixed;\r\n            \r\n                display: block;\r\n                padding: 6px 0;\r\n                width: max-content;\r\n            \r\n                background-color: white;\r\n            \r\n                -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n            }\r\n            \r\n            :host(:not([expanded])) [part=\"box\"] {\r\n                opacity: 0;\r\n                pointer-events: none;\r\n            }\r\n        `;\r\n        mutationObserver = new MutationObserver(\r\n            (mutationsList: MutationRecord[]) => {\r\n                mutationsList.forEach((mutation: MutationRecord) => {\r\n                    const {target} = mutation;\r\n                    const select = <HTMLESelectElementBase>target;\r\n                    const {selectedOption, value, options} = select;\r\n                    if (!selectedOption) {\r\n                        const optionToSelect = value ? options.find(\r\n                            option_i => option_i.value === value\r\n                        ) : select.#firstOption();\r\n                        if (optionToSelect) {\r\n                            optionToSelect.selected = true;\r\n                        }\r\n                        else {\r\n                            select.#setSelectedOption(null);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        internals.role = \"combobox\";\r\n        this.internals = internals;\r\n        this.#wasExpandedOnMouseDown = false;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        mutationObserver.observe(\r\n            this, {\r\n                childList: true,\r\n                subtree: true\r\n            }\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {options, selectedOption, value} = this;\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : 0;\r\n        customElements.upgrade(this);\r\n        const optionToSelect = selectedOption ?? (\r\n            value ? options.find(\r\n                option_i => option_i.value === value\r\n            ) : null\r\n        ) ?? this.#firstOption();\r\n        if (optionToSelect) {\r\n            if (optionToSelect === selectedOption) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n            else {\r\n                this.#selectOption(optionToSelect);\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionBox();\r\n            const {selectedOption} = this;\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n    \r\n    #value(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=value]\")!;\r\n    }\r\n\r\n    #box(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=box]\")!;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement && !node.disabled && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        else if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement) {\r\n        const {selectedOption} = this;\r\n        if (option !== selectedOption) {\r\n            option.selected = true;\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(option: HTMLEOptionElement | null) {\r\n        const {label, value} = option ?? {\r\n            label: \"\",\r\n            value: \"\"\r\n        };\r\n        const {internals} = this;\r\n        this.#value().textContent = label;\r\n        internals.setFormValue(value);\r\n    }\r\n\r\n    #positionBox(): void {\r\n        const box = this.#box()\r\n        const {style: optionsStyle} = box;\r\n        const {bottom, left} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const wasExpandedOnMouseDown = this.#wasExpandedOnMouseDown;\r\n        if (!wasExpandedOnMouseDown) {\r\n            const {selectedOption} = this;\r\n            this.expand();\r\n            (selectedOption ?? this.#firstOption() ?? this).focus({preventScroll: true});\r\n        }\r\n        else {\r\n            this.collapse();\r\n            const targetOption = (<HTMLElement>target).closest<HTMLEOptionElement>(\"e-option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin || this === relatedTarget) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(): void {\r\n        const {expanded} = this;\r\n        this.#wasExpandedOnMouseDown = expanded;\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            targetOption.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded, activeOption, selectedOption} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                this.toggle();\r\n                const {expanded} = this;\r\n                if (expanded) {\r\n                    const {selectedOption} = this;\r\n                    (selectedOption ?? this.#firstOption())?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    if (activeOption) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const {options} = this;\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            const {selected} = targetOption;\r\n            if (selected) {\r\n                const {options} = this;\r\n                options.forEach((option_i) => {\r\n                    if (option_i !== targetOption && option_i.selected) {\r\n                        option_i.selected = false;\r\n                    }\r\n                });\r\n                this.#setSelectedOption(targetOption);\r\n            }\r\n            else {\r\n                const {selectedOption} = this;\r\n                if (selectedOption === null) {\r\n                    const firstOption = this.#firstOption();\r\n                    if (firstOption !== null) {\r\n                        this.#setSelectedOption(firstOption);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                            \r\n                width: 24px;\r\n                height: 12px;\r\n                \r\n                background-color: var(--selected-item-color);\r\n\r\n                -webkit-mask-image: url(\"/assets/dots.png\");\r\n                mask-image: url(\"/assets/dots.png\");\r\n\r\n                -webkit-mask-repeat: repeat;\r\n                mask-repeat: repeat;\r\n                cursor: move;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                background-color: var(--selected-item-color);\r\n                transition-property: opacity;\r\n                transition-delay: 0.2s;\r\n                transition-duration: 0.2s;\r\n                transition-timing-function: ease-out;\r\n                \r\n                height: 4px;\r\n                cursor: ns-resize;\r\n            }\r\n        `;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {style} = target;\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element, trimMultilineIndent } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"spinner\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar spinnerShadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"spinner\";\r\n\r\n    static {\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        spinnerShadowTemplate = element(\"template\");\r\n        spinnerShadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"spinner\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            :host(:is(:not([type]), [type=\"bar\"])) {\r\n                border: 1px solid gainsboro;\r\n                border-radius: 4px;\r\n            }\r\n        \r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n                width: 86px;\r\n                border-radius: 4px;\r\n            }\r\n        \r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n        \r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: 1s;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n        \r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 32px;\r\n                background-color: rgb(0, 128, 255);\r\n                animation-name: cursor;\r\n            }\r\n        \r\n            :host([type=\"spinner\"]) {\r\n                display: inline-block;\r\n                width: 20px;\r\n                height: 20px;\r\n            }\r\n        \r\n            [part=\"spinner\"] {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n            }\r\n        \r\n            [part=\"spinner\"]::after {\r\n                content: \" \";\r\n                display: block;\r\n                width: 12px;\r\n                height: 12px;\r\n                border-radius: 50%;\r\n                border-width: 4px;\r\n                border-style: solid;\r\n                border-color: transparent rgb(0, 128, 255);\r\n                animation: spin 1.2s linear infinite;\r\n            }\r\n        \r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        \r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        \r\n            @keyframes spin {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.replaceChildren(\r\n            barShadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"spinner\": {\r\n                shadowRoot.replaceChildren(\r\n                    spinnerShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement } from \"../Element\";\r\n\r\nexport { HTMLESeparatorElement };\r\n\r\ninterface HTMLESeparatorElementConstructor {\r\n    prototype: HTMLESeparatorElement;\r\n    new(): HTMLESeparatorElement;\r\n}\r\n\r\ninterface HTMLESeparatorElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-separator\": HTMLESeparatorElement,\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-separator\"\r\n})\r\nclass HTMLESeparatorElementBase extends HTMLElement implements HTMLESeparatorElement {\r\n    #internals: ElementInternals;\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                margin: 10px 0 10px 27px;\r\n                border: none;\r\n                border-top: 1px solid lightgrey;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.#internals = this.attachInternals();\r\n        this.#internals.role = \"separator\";\r\n    }\r\n}\r\n\r\nvar HTMLESeparatorElement: HTMLESeparatorElementConstructor = HTMLESeparatorElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEToolTipElement };\r\n\r\ninterface HTMLEToolTipElementConstructor {\r\n    prototype: HTMLEToolTipElement;\r\n    new(): HTMLEToolTipElement;\r\n}\r\n\r\ninterface HTMLEToolTipElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    htmlFor: string;\r\n    position: \"top\" | \"bottom\" | \"right\" | \"left\";\r\n    visible: boolean;\r\n    show(options?: {immediate?: boolean}): void;\r\n    hide(options?: {immediate?: boolean}): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tooltip\": HTMLEToolTipElement;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\nvar HIDE_DELAY_MS = 100;\r\nvar SHOW_DELAY_MS = 200;\r\nvar ANIMATION_DURATION = 100;\r\n\r\n@CustomElement({\r\n    name: \"e-tooltip\"\r\n})\r\nclass HTMLEToolTipElementBase extends HTMLElement implements HTMLEToolTipElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true, name: \"for\"})\r\n    htmlFor!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    position!: \"top\" | \"bottom\" | \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    visible!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #targetListenerObject: EventListenerObject;\r\n    #documentListenerObject: EventListenerObject;\r\n    #toggleAnimation: Animation | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n                position: fixed;\r\n                padding: 4px;\r\n                border-radius: 3px;\r\n                box-sizing: border-box;\r\n                background-color: white;\r\n                border: 1px solid black;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host([hidden]) {\r\n                display: none;\r\n            }\r\n\r\n            :host(:not([visible])) {\r\n                opacity: 0;\r\n            }\r\n            \r\n            [part=\"arrow\"] {\r\n                display: inline-block;\r\n                position: fixed;\r\n                z-index: 1;\r\n                width: 4px;\r\n                height: 4px;\r\n                box-sizing: border-box;\r\n                background-color: white;\r\n                border: 1px solid black;\r\n                border-width: 0 1px 1px 0;\r\n            }\r\n            \r\n            :host(:is(:not([position]), [position=\"top\"])) [part=\"arrow\"] {\r\n                transform: translate(-2px, -2px) rotate(45deg);\r\n            }\r\n            \r\n            :host(:is([position=\"bottom\"])) [part=\"arrow\"] {\r\n                transform: translate(-2px, -2px) rotate(225deg);\r\n            }\r\n            \r\n            :host(:is([position=\"left\"])) [part=\"arrow\"] {\r\n                transform: translate(-2px, -2px) rotate(315deg);\r\n            }\r\n            \r\n            :host(:is([position=\"right\"])) [part=\"arrow\"] {\r\n                transform: translate(-2px, -2px) rotate(135deg);\r\n            }        \r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#toggleAnimation = null;\r\n        this.#targetListenerObject = (function(tooltip) {\r\n            return {\r\n                handleEvent(event: Event) {\r\n                    const {type} = event;\r\n                    switch (type) {\r\n                        case \"mouseenter\": {\r\n                            tooltip.#handleTargetMouseEnterEvent();\r\n                            break;\r\n                        }\r\n                        case \"mouseleave\": {\r\n                            tooltip.#handleTargetMouseLeaveEvent();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        })(this);\r\n        this.#documentListenerObject = (function(tooltip) {\r\n            return {\r\n                handleEvent(event: Event) {\r\n                    const {type} = event;\r\n                    switch (type) {\r\n                        case \"keydown\": {\r\n                            tooltip.#handleDocumentKeyDownEvent(<KeyboardEvent>event);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        })(this);\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {htmlFor} = this;\r\n        this.#setTarget(htmlFor);\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"for\": {\r\n                this.#setTarget(newValue);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    show(options?: {immediate?: boolean}): void {\r\n        const {immediate = false} = options ?? {};\r\n        let toggleAnimation = this.#toggleAnimation;\r\n        if (toggleAnimation !== null) {\r\n            const {id} = toggleAnimation;\r\n            if (id === \"hide\") {\r\n                toggleAnimation.cancel();\r\n            }\r\n        }\r\n        if (!this.visible) {\r\n            this.hidden = false;\r\n            toggleAnimation = this.animate([\r\n                { opacity: 0 },\r\n                { opacity: 1 }\r\n            ], {\r\n                id: \"show\",\r\n                delay: immediate ? 0 : SHOW_DELAY_MS,\r\n                duration: immediate ? 0 : ANIMATION_DURATION\r\n            });\r\n            const {finished} = toggleAnimation;\r\n            finished.then(\r\n                () => {\r\n                    this.visible = true;\r\n                }\r\n            );\r\n            this.#toggleAnimation = toggleAnimation;\r\n            this.#position();\r\n        }\r\n        else {\r\n            this.#toggleAnimation = null;\r\n        }\r\n    }\r\n\r\n    hide(options?: {immediate?: boolean}): void {\r\n        const {immediate = false} = options ?? {};\r\n        let toggleAnimation = this.#toggleAnimation;\r\n        if (toggleAnimation !== null) {\r\n            const {id} = toggleAnimation;\r\n            if (id === \"show\") {\r\n                toggleAnimation.cancel();\r\n            }\r\n        }\r\n        if (this.visible) {\r\n            toggleAnimation = this.animate([\r\n                { opacity: 1 },\r\n                { opacity: 0 }\r\n            ], {\r\n                id: \"hide\",\r\n                delay: immediate ? 0 : HIDE_DELAY_MS,\r\n                duration: immediate ? 0 : ANIMATION_DURATION\r\n            });\r\n            const {finished} = toggleAnimation;\r\n            finished.then(\r\n                () => {\r\n                    this.visible = false;\r\n                    this.hidden = true;\r\n                }\r\n            );\r\n            this.#toggleAnimation = toggleAnimation;\r\n        }\r\n        else {\r\n            this.#toggleAnimation = null;\r\n        }\r\n    }\r\n\r\n    #arrow(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=arrow]\")!;\r\n    }\r\n\r\n    #setTarget(id: string | null): void {\r\n        const target = id ? document.getElementById(id) : null;\r\n        if (target !== null) {\r\n            const oldTarget = this.#target;\r\n            const targetListenerObject = this.#targetListenerObject;\r\n            if (oldTarget) {\r\n                oldTarget.removeEventListener(\"mouseenter\", targetListenerObject);\r\n                oldTarget.removeEventListener(\"mouseleave\", targetListenerObject);\r\n            }\r\n            target.addEventListener(\"mouseenter\", targetListenerObject);\r\n            target.addEventListener(\"mouseleave\", targetListenerObject);\r\n        }\r\n        this.#target = target;\r\n    }\r\n\r\n    #position(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {top: targetTop, bottom: targetBottom, left: targetLeft, right: targetRight} = target.getBoundingClientRect();\r\n            const {width: tooltipWidth, height: tooltipHeight} = this.getBoundingClientRect();\r\n            const tooltipHalfWidth = tooltipWidth / 2;\r\n            const tooltipHalfHeight = tooltipHeight / 2;\r\n            const targetCenter = (targetRight + targetLeft) / 2;\r\n            const targetMiddle = (targetBottom + targetTop) / 2;\r\n            const {position, style: tooltipStyle} = this;\r\n            const arrow = this.#arrow();\r\n            const {style: arrowStyle} = arrow;\r\n            const {width: arrowWidth, height: arrowHeight} = arrow.getBoundingClientRect();\r\n            const arrowHalfWidth = arrowWidth / 2;\r\n            const arrowHalfHeight = arrowHeight / 2;\r\n            const {clientWidth} = document.body;\r\n            switch (position) {\r\n                case \"top\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetTop - tooltipHeight - arrowHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${\r\n                        Math.max(0, Math.min(targetCenter - tooltipHalfWidth, clientWidth - tooltipWidth))\r\n                    }px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetTop - arrowHalfHeight}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetCenter}px`);\r\n                    break;\r\n                }\r\n                case \"bottom\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetBottom + arrowHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${\r\n                        Math.max(0, Math.min(targetCenter - tooltipHalfWidth, clientWidth - tooltipWidth))\r\n                    }px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetBottom + arrowHalfHeight}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetCenter}px`);\r\n                    break;\r\n                }\r\n                case \"left\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetMiddle - tooltipHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${targetLeft - tooltipWidth - arrowHalfWidth}px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetMiddle}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetLeft - arrowHalfWidth}px`);\r\n                    break;\r\n                }\r\n                case \"right\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetMiddle - tooltipHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${targetRight + arrowHalfWidth}px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetMiddle}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetRight + arrowHalfWidth}px`);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTargetMouseEnterEvent(): void {\r\n        this.show();\r\n        const toggleAnimation = this.#toggleAnimation;\r\n        if (toggleAnimation) {\r\n            const documentListenerObject = this.#documentListenerObject;\r\n            const {finished} = toggleAnimation;\r\n            finished.then(() => {\r\n                document.addEventListener(\"keydown\", documentListenerObject);\r\n            });\r\n        }\r\n    }\r\n\r\n    #handleTargetMouseLeaveEvent(): void {\r\n        this.hide();\r\n        const toggleAnimation = this.#toggleAnimation;\r\n        if (toggleAnimation) {\r\n            const documentListenerObject = this.#documentListenerObject;\r\n            const {finished} = toggleAnimation;\r\n            finished.then(() => {\r\n                document.removeEventListener(\"keydown\", documentListenerObject);\r\n            });\r\n        }\r\n    }\r\n\r\n    #handleDocumentKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Escape\": {\r\n                this.hide({\r\n                    immediate: true\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolTipElement: HTMLEToolTipElementConstructor = HTMLEToolTipElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                background-color: var(--selected-item-color);\r\n                transition-property: opacity;\r\n                transition-delay: 0.2s;\r\n                transition-duration: 0.2s;\r\n                transition-timing-function: ease-out;\r\n                \r\n                width: 4px;\r\n                cursor: ew-resize;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            const {style} = target;\r\n            style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            records.splice(0);\r\n        }\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function() {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(item: Model): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model): number {\r\n        return this.#items.indexOf(item);\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { NodeCollection };\r\n\r\ninterface NodeCollectionConstructor {\r\n    prototype: NodeCollection;\r\n    new(root: Node, filter: NodeFilter): NodeCollection<Node>;\r\n    new<N extends Node>(root: Node, filter: NodeFilter): NodeCollection<N>;\r\n}\r\n\r\ninterface NodeCollection<N extends Node = Node> {\r\n    readonly root: Node;\r\n    readonly filter: NodeFilter;\r\n    readonly length: number;\r\n    item(index: number): N | undefined;\r\n    values(): IterableIterator<N>;\r\n}\r\n\r\nclass NodeCollectionBase<N extends Node = Node> {\r\n    #root: Node;\r\n    #filter: NodeFilter;\r\n    #observer: MutationObserver;\r\n    #observerTargets: Node[];\r\n\r\n    #items: N[];\r\n\r\n    constructor(root: Node, filter: NodeFilter) {\r\n        this.#root = root;\r\n        this.#filter = filter;\r\n        this.#items = [];\r\n        this.#observer = new MutationObserver(\r\n            this.#handleMutationRecords.bind(this)\r\n        );\r\n        this.#observerTargets = [root];\r\n        this.#observer.observe(root, {\r\n            childList: true\r\n        });\r\n        this.#handleAddedNodes(root.childNodes);\r\n    }\r\n\r\n    get root() {\r\n        return this.#root;\r\n    }\r\n\r\n    get filter() {\r\n        return this.#filter;\r\n    }\r\n\r\n    get length() {\r\n        return this.#update(), this.#items.length;\r\n    }\r\n\r\n    item(index: number): N | undefined {\r\n        return this.#update(), this.#items[index];\r\n    }\r\n\r\n    values(): IterableIterator<N> {\r\n        return this.#update(), this.#items.values();\r\n    }\r\n\r\n    #update(): void {\r\n        const records = this.#observer.takeRecords();\r\n        if (records.length > 0) {\r\n            this.#handleMutationRecords(records);\r\n        }\r\n    }\r\n\r\n    #addObserverTargets(targets: Node[]): void {\r\n        const observer = this.#observer;\r\n        observer.disconnect();\r\n        this.#observerTargets.push(...targets);\r\n        this.#observerTargets.forEach((group_i) => {\r\n            observer.observe(group_i, {\r\n                childList: true\r\n            });\r\n        });\r\n    }\r\n\r\n    #removeObserverTargets(targets: Node[]): void {\r\n        const observer = this.#observer;\r\n        observer.disconnect();\r\n        this.#observerTargets = this.#observerTargets.filter(target_i => !targets.includes(target_i));\r\n        this.#observerTargets.forEach((group_i) => {\r\n            observer.observe(group_i, {\r\n                childList: true\r\n            });\r\n        });\r\n    }\r\n\r\n    #handleAddedNodes(nodes: NodeList): void {\r\n        if (nodes.length > 0) {\r\n            const filter = this.#filter;\r\n            const acceptNode = typeof filter === \"function\" ? filter : filter.acceptNode;\r\n            const addedItems = <N[]>[];\r\n            const addedObserverTargets = <Node[]>[];\r\n            nodes.forEach((node: Node) => {\r\n                const acceptNodeResult = acceptNode(node);\r\n                switch (acceptNodeResult) {\r\n                    case NodeFilter.FILTER_ACCEPT: {\r\n                        addedItems.push(<N>node);\r\n                        break;\r\n                    }\r\n                    case NodeFilter.FILTER_SKIP: {\r\n                        addedObserverTargets.push(node);\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n            if (addedObserverTargets.length > 0) {\r\n                this.#addObserverTargets(addedObserverTargets);\r\n                addedObserverTargets.forEach((target_i) => {\r\n                    this.#handleAddedNodes(target_i.childNodes);\r\n                });\r\n            }\r\n            if (addedItems.length > 0) {\r\n                addedItems.forEach((item_i) => {\r\n                    const index = this.#items.findIndex(\r\n                        item_i => item_i.compareDocumentPosition(item_i) & Node.DOCUMENT_POSITION_FOLLOWING\r\n                    );\r\n                    this.#items.splice(index > -1 ? index : 0, 0, item_i);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleRemovedNodes(nodes: NodeList): void {\r\n        if (nodes.length > 0) {\r\n            const filter = this.#filter;\r\n            const acceptNode = typeof filter === \"function\" ? filter : filter.acceptNode;\r\n            const removedItems = <N[]>[];\r\n            const removedObserverTargets = <Node[]>[];\r\n            nodes.forEach((node: Node) => {\r\n                const acceptNodeResult = acceptNode(node);\r\n                switch (acceptNodeResult) {\r\n                    case NodeFilter.FILTER_ACCEPT: {\r\n                        removedItems.push(<N>node);\r\n                        break;\r\n                    }\r\n                    case NodeFilter.FILTER_SKIP: {\r\n                        removedObserverTargets.push(node);\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n            if (removedObserverTargets.length > 0) {\r\n                this.#removeObserverTargets(removedObserverTargets);\r\n                removedObserverTargets.forEach((target_i) => {\r\n                    this.#handleRemovedNodes(target_i.childNodes);\r\n                });\r\n            }\r\n            if (removedItems.length > 0) {\r\n                this.#items = this.#items.filter(item_i => !removedItems.includes(item_i));\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMutationRecords(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {addedNodes, removedNodes} = mutation;\r\n            this.#handleRemovedNodes(removedNodes);\r\n            this.#handleAddedNodes(addedNodes);\r\n        });\r\n    }\r\n}\r\n\r\nvar NodeCollection: NodeCollectionConstructor = NodeCollectionBase;","import * as arrowRight from \"../../assets/arrow_right_FILL0_wght400_GRAD0_opsz48.svg\";\r\nimport * as arrowDropDown from \"../../assets/arrow_drop_down_FILL0_wght400_GRAD0_opsz48.svg\";\r\nimport * as arrowDropUp from \"../../assets/arrow_drop_up_FILL0_wght400_GRAD0_opsz48.svg\";\r\n\r\nexport { themeStylesheet };\r\n\r\nconst themeStylesheet = new CSSStyleSheet();\r\nthemeStylesheet.replace(/*css*/`\r\n    :root {\r\n        --font-color: black;\r\n        \r\n        --icon-size: 18px;\r\n\r\n        --line-height: 18px;\r\n        --padded-line-height: 22px;\r\n\r\n        --menu-box-shadow: rgba(0, 0, 0, 0.2) 0 1px 3px;\r\n\r\n        --primary-color: white;\r\n        --secondary-color: white;\r\n\r\n        --text-color: white;\r\n        --text-darker-color: white;\r\n        --text-lighter-color: white;\r\n\r\n        --content-background-color: white;\r\n        --item-border-color: grey;\r\n        --section-border-color: lightgrey;\r\n        --padding-background-color: gainsboro;\r\n\r\n        --accent-color: hsl(212, 100%, 50%);\r\n        --hovered-item-color: hsl(203, 92%, 80%, 50%);\r\n        --focused-item-color: hsl(203, 92%, 50%, 50%);\r\n        --focused-item-outline-color: hsl(203, 92%, 50%);\r\n        --selected-item-color: hsl(203, 92%, 75%, 75%);\r\n        --activated-item-color: hsl(203, 92%, 50%, 50%);\r\n        --droptarget-item-color: hsl(203, 92%, 50%, 50%);\r\n\r\n        --arrow-color: var(--font-color);\r\n        --arrow-icon-collapsed: url(${arrowRight});\r\n        --arrow-icon-expanded: url(${arrowDropDown});\r\n\r\n        --sortorder-indicator-color: var(--font-color);\r\n        --sortorder-indicator-ascending: url(${arrowDropUp});\r\n        --sortorder-indicator-descending: url(${arrowDropDown});\r\n    }\r\n`);","import { element, reactiveChildElements, CustomElement, fragment, AttributeProperty, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\ninterface GridInit {\r\n    rows: GridRowModel[];\r\n    columns: GridColumnModel[];\r\n}\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: GridInit)\r\n    constructor(init?: GridInit) {\r\n        super();\r\n        const {rows: initRows = [], columns: initColumns = []} = init ?? {};\r\n        const rows = new ModelList(initRows);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(initColumns);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i === column ? sortOrder : undefined;\r\n        });\r\n        const sortTest = (() => {\r\n            const {type} = column;\r\n            switch (type) {\r\n                case String: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = String(column.extract(row_1));\r\n                        const cell_2 = String(column.extract(row_2));\r\n                        return sortOrder * cell_1.localeCompare(cell_2);\r\n                    };\r\n                }\r\n                default: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = Number(column.extract(row_1));\r\n                        const cell_2 = Number(column.extract(row_2));\r\n                        return Math.sign(sortOrder * (cell_1 - cell_2));\r\n                    };\r\n                }\r\n            }\r\n        })();\r\n        this.rows.sort(sortTest);\r\n    }\r\n}\r\n\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\ninterface GridColumnInit {\r\n    name: string,\r\n    type: NumberConstructor | StringConstructor | DateConstructor,\r\n    label: string,\r\n    extract: (row: GridRowModel) => string,\r\n    filters?: (GridRowFilter & {name: string})[]\r\n}\r\n\r\nclass GridColumnModel extends ModelObject {\r\n    readonly name: string\r\n    readonly type: NumberConstructor | StringConstructor | DateConstructor;\r\n    readonly label: string;\r\n    readonly extract: (row: GridRowModel) => string;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: GridColumnInit) {\r\n        super();\r\n        const {name, type, label, extract, filters = []} = init;\r\n        this.name = name;\r\n        this.type = type;\r\n        this.label = label;\r\n        this.extract = extract;\r\n        this.filters = filters;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    id: number;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {\r\n        id: number;\r\n        name: string,\r\n        age: number\r\n    }) {\r\n        super();\r\n        const {id, name, age} = init;\r\n        this.id = id;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridview\": GridView,\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridview\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n    \r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n            \r\n            e-gridrow[hidden] {\r\n                display: none;\r\n            }\r\n            \r\n            e-gridcell[type=\"gridcell\"] {\r\n                max-width: 0;\r\n            \r\n                overflow: clip;\r\n                text-overflow: ellipsis;\r\n                white-space: nowrap;\r\n            }\r\n            \r\n            e-gridcell[type=\"columnheader\"] {\r\n                width: 120px;\r\n            }\r\n            \r\n            .gridcell-label,\r\n            .gridheader-label {\r\n                padding-left: 4px;\r\n            }\r\n            \r\n            .gridcell-content {\r\n                overflow: clip;\r\n            }\r\n            \r\n            .gridheader-content {\r\n                display: flex;\r\n            }\r\n            \r\n            .gridheader-label {\r\n                flex: 1 1 0;\r\n                overflow: clip;\r\n                text-overflow: ellipsis;\r\n                white-space: nowrap;\r\n            }\r\n            \r\n            e-treeitem::part(arrow) {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px 4px 1px 1px;\r\n            }\r\n            \r\n            .gridheader-sort-indicator {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n            }\r\n            \r\n            .gridheader-sort-indicator::before {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--sortorder-indicator-color, none);\r\n            }\r\n            \r\n            e-gridcell[type=\"columnheader\"]:not([data-sortorder]) .gridheader-sort-indicator::before {\r\n                background-color: unset;\r\n            }\r\n            \r\n            e-gridcell[type=\"columnheader\"][data-sortorder=\"1\"] .gridheader-sort-indicator::before {\r\n                -webkit-mask-image: var(--sortorder-indicator-ascending, none);\r\n                mask-image: var(--sortorder-indicator-ascending, none);\r\n            }\r\n            \r\n            e-gridcell[type=\"columnheader\"][data-sortorder=\"-1\"] .gridheader-sort-indicator::before {\r\n                -webkit-mask-image: var(--sortorder-indicator-descending, none);\r\n                mask-image: var(--sortorder-indicator-descending, none);\r\n            }\r\n            \r\n            e-gridhead e-wsash:not(:hover) {\r\n                flex: 0 0 auto;\r\n                width: 2px;\r\n                margin-right: 1px;\r\n                margin-left: 1px;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.#cellDelegate =\r\n            (row: GridRowModel, column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.extract(row)\r\n                });\r\n        this.#columnDelegate =\r\n            (column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.label\r\n                });\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.setModel(model ?? new GridModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.render();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.shadowRoot.querySelector(\"e-grid\")!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridbody > e-gridrow[data-index='${row.id}']`);\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridhead > e-gridcell[id=${column.name}]`);\r\n    }\r\n    \r\n    getColumnCellsElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"/css/main.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: element(\"input\", {\r\n                    attributes: {\r\n                        type: \"search\"\r\n                    },\r\n                    listeners: {\r\n                        input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                    }\r\n                })\r\n            }),\r\n            element(\"e-grid\", {\r\n                attributes: {\r\n                    tabindex: 0,\r\n                    selectby: \"row\",\r\n                    multisectable: true\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: reactiveChildElements(\r\n                            model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                        ),\r\n                        listeners: {\r\n                            contextmenu: <EventListener>this.#handleHeadContextMenuEvent.bind(this),\r\n                            click: <EventListener>this.#handleHeadClickEvent.bind(this)\r\n                        }\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    #filter(row: GridRowModel): boolean {\r\n        const displayFilters = this.#displayFilters;\r\n        const searchFilter = this.#searchFilter;\r\n        return (displayFilters.length > 0 ? displayFilters.some(filter_i => filter_i.filter(row)) : true) &&\r\n        (searchFilter ? searchFilter.filter(row) : true);\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        this.#searchFilter = filter;\r\n        Array.from(rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden = !this.#filter(row_i);\r\n            }\r\n        });\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            displayFilters.push(filter);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    removeAllDisplayFilters(): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        displayFilters.splice(0, displayFilters.length);\r\n        Array.from(rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden = !this.#filter(row_i);\r\n            }\r\n        });\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                attributes: {\r\n                    type: \"columnheader\",\r\n                    id: column.name\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridheader-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-label\"\r\n                                },\r\n                                children: this.#columnDelegate(column)\r\n                            }),\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-sort-indicator\"\r\n                                }\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    attributes: {\r\n                                        controls: column.name\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\": {\r\n                        const {dataset} = cell;\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete dataset.sortorder;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            dataset: {\r\n                index: row.id\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            attributes: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: element(\"span\", {\r\n                attributes: {\r\n                    class: \"gridcell-content\"\r\n                },\r\n                children: (<Node[]>[\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-label\"\r\n                        },\r\n                        children: this.#cellDelegate(row, column)\r\n                    })\r\n                ])\r\n            })\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleHeadContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {gridElement} = this;\r\n        const targetHead = <HTMLElement>currentTarget;\r\n        const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n        const {model} = this;\r\n        if (targetHeader) {\r\n            const column = model.getColumnByName(targetHeader.id)!;\r\n            const {sortorder, filters} = column;\r\n            const contextMenu = element(\"e-menu\",  {\r\n                attributes: {\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize Auto\"\r\n                        },\r\n                        children: \"Resize auto\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    const labels = this.getColumnCellsElements(column).map(\r\n                                        cell_i => cell_i.querySelector(\".gridcell-label\")!\r\n                                    );\r\n                                    const maxWidth = labels.reduce(\r\n                                        (maxWidth, label) => Math.max(maxWidth, label.getBoundingClientRect().width), 0\r\n                                    );\r\n                                    style.setProperty(\"width\", `${maxWidth}px`);\r\n                                }\r\n                                gridElement.focus();\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize To Default\"\r\n                        },\r\n                        children: \"Resize to Default\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    style.removeProperty(\"width\");\r\n                                }\r\n                                gridElement.focus();\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Sort\",\r\n                        },\r\n                        children: [\r\n                            \"Sort\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: [\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"1\",\r\n                                            label: \"Ascending\",\r\n                                            checked: sortorder === 1\r\n                                        },\r\n                                        children: \"Ascending\"\r\n                                    }),\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"-1\",\r\n                                            label: \"Descending\",\r\n                                            checked: sortorder === -1\r\n                                        },\r\n                                        children: \"Descending\"\r\n                                    })\r\n                                ],\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n                                        if (targetItem) {\r\n                                            model.sortByColumn(column, Number(targetItem.value));\r\n                                        }\r\n                                        gridElement.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Filter\"\r\n                        },\r\n                        children: [\r\n                            \"Filter\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: filters.map(filter => {\r\n                                    const {name} = filter;\r\n                                    return element(\"e-menuitem\", {\r\n                                        attributes: {\r\n                                            type: \"checkbox\",\r\n                                            checked: this.#displayFilters.includes(filter),\r\n                                            label: name\r\n                                        },\r\n                                        children: name\r\n                                    })\r\n                                }).concat(\r\n                                    element(\"e-menuitem\", {\r\n                                        attributes: {\r\n                                            type: \"button\",\r\n                                            label: \"Remove filters\"\r\n                                        },\r\n                                        children: \"Remove filters\"\r\n                                    })\r\n                                ),\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n                                        if (targetItem) {\r\n                                            const {checked, label} = targetItem;\r\n                                            const filter = filters.find(filter => filter.name === label);\r\n                                            if (filter) {\r\n                                                if (checked) {\r\n                                                    this.addDisplayFilter(filter);\r\n                                                }\r\n                                                else {\r\n                                                    this.removeDisplayFilter(filter);\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                this.removeAllDisplayFilters();\r\n                                            }\r\n                                        }\r\n                                        gridElement.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n            targetHead.append(contextMenu);\r\n            contextMenu.positionContextual(clientX, clientY);\r\n            contextMenu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            if (value !== \"\") {\r\n                this.setSearchFilter({\r\n                    filter: (row) => row.name.toLowerCase().includes(value.toLowerCase())\r\n                });\r\n            }\r\n            else {\r\n                this.setSearchFilter(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleHeadClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetIsHeaderContent = (<HTMLElement>target).matches(\"e-gridcell[type=columnheader] :scope:not(e-wsash)\");\r\n        if (targetIsHeaderContent) {\r\n            const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n            const {model} = this;\r\n            const {columns} = model;\r\n            if (targetHeader) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetHeader.id);\r\n                if (targetColumn) {\r\n                    const {sortorder = -1} = targetColumn;\r\n                    model.sortByColumn(targetColumn, -sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","import { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\nimport { CustomElement, element, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { MenuModel };\r\nexport { MenuItemModel };\r\nexport { MenuView };\r\n\r\ninterface MenuInit {\r\n    name?: string;\r\n    items: MenuItemModel[];\r\n}\r\n\r\nclass MenuModel extends ModelObject {\r\n    readonly items: ModelList<MenuItemModel>;\r\n    \r\n    @ModelProperty()\r\n    name?: string;\r\n    \r\n    constructor(init: MenuInit) {\r\n        super();\r\n        this.name = init?.name;\r\n        this.items = new ModelList(init?.items ?? []);\r\n    }\r\n}\r\n\r\ninterface MenuItemInit {\r\n    label: string;\r\n    name?: string;\r\n    type?: \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n    menu?: MenuModel;\r\n}\r\n\r\nclass MenuItemModel extends ModelObject {\r\n    @ModelProperty()\r\n    name?: string;\r\n\r\n    @ModelProperty()\r\n    label: string;\r\n\r\n    @ModelProperty()\r\n    type?: \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\n    @ModelProperty()\r\n    menu?: MenuModel;\r\n    \r\n    constructor(init: MenuItemInit) {\r\n        super();\r\n        const {name, label, type, menu} = init;\r\n        this.name = name;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.menu = menu;\r\n    }\r\n}\r\n\r\ninterface MenuViewConstructor {\r\n    prototype: MenuView;\r\n    new(): MenuView;\r\n    new(model: MenuModel): MenuView;\r\n}\r\n\r\ninterface MenuView extends View {\r\n    readonly model: MenuModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-menu\": MenuView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-menu\"\r\n})\r\nclass MenuViewBase extends View {\r\n    readonly model!: MenuModel;\r\n\r\n    constructor()\r\n    constructor(model: MenuModel)\r\n    constructor(model?: MenuModel) {\r\n        super();\r\n        this.setModel(model ?? new MenuModel({\r\n            items: []\r\n        }));\r\n    }\r\n\r\n    renderLight() {\r\n        const {model} = this;\r\n        return this.#renderMenu(model);\r\n    }\r\n\r\n    #renderMenu(menu: MenuModel) {\r\n        return element(\"e-menu\", {\r\n            children: reactiveChildElements(\r\n                menu.items,\r\n                item_i => this.#renderMenuItem(item_i)\r\n            )\r\n        });\r\n    }\r\n\r\n    #renderMenuItem(item: MenuItemModel): HTMLEMenuItemElement {\r\n        const {label, type, menu} = item;\r\n        return reactiveElement(\r\n            item,\r\n            element(\"e-menuitem\", {\r\n                attributes: {\r\n                    type: type\r\n                },\r\n                children: [\r\n                    <string | Node>label\r\n                ].concat(\r\n                    (menu !== undefined) ? [\r\n                        this.#renderMenu(menu)\r\n                    ] : []\r\n                )\r\n            }),\r\n            [\"label\", \"name\"],\r\n            (menuitem, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\": {\r\n                        menuitem.label = newValue;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nvar MenuView: MenuViewConstructor = MenuViewBase;","import { HTMLEMenuElement } from \"../elements/containers/menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../elements/containers/toolbars/ToolBar\";\r\nimport { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { AttributeProperty, CustomElement, element, fragment, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { TreeItemModelList };\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\ninterface TreeModelInit {\r\n    items: TreeItemModel[];\r\n    sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n}\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n\r\n    constructor()\r\n    constructor(init: TreeModelInit)\r\n    constructor(init?: TreeModelInit) {\r\n        super();\r\n        const {items = [], sortFunction} = init ?? {};\r\n        items.forEach((item_i, i) => item_i.index = i);\r\n        const childItems = new ModelList(items);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.subtreeItems());\r\n        this.sortFunction = sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.name.localeCompare(item_b.name);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n    \r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, subtreeItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...subtreeItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...subtreeItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n            Array.from((<ModelList<TreeItemModel>>target).values()).forEach((item_i, i) => {\r\n                item_i.index = i;\r\n            });\r\n        }\r\n    }\r\n\r\n    subtreeItems(): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...treeItem_i.subtreeItems())\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (itemUriLength === uriLength) {\r\n                    return <TreeItemModel>item_i;\r\n                }\r\n                return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nclass TreeItemModelList {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n    \r\n    @ModelProperty()\r\n    type: \"leaf\" | \"parent\";\r\n\r\n    @ModelProperty()\r\n    index: number;\r\n\r\n    get level(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode.level + 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    get uri(): string {\r\n        const {parentNode, name} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}${name}/`;\r\n        }\r\n        return `${name}/`;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {name: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {name, type, items = []} = init;\r\n        items.forEach((item_i, i) => item_i.index = i);\r\n        const childItems = new ModelList(items);\r\n        childItems.setParent(this);\r\n        this.name = name;\r\n        this.childItems = childItems;\r\n        this.type = type;\r\n        this.index = -1;\r\n    }\r\n\r\n    subtreeItems(): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...treeItem_i.subtreeItems())\r\n        );\r\n    }\r\n\r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly model: TreeModel;\r\n    setModel(model: TreeModel): void;\r\n    renderShadow(): Node;\r\n    draggable: boolean;\r\n    selectedItems(): TreeItemModel[];\r\n    activeItem(): TreeItemModel | null;\r\n    get treeElement(): HTMLETreeElement | null ;\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement | null;\r\n    treeItem(element: HTMLETreeItemElement): TreeItemModel | null;\r\n    itemContentDelegate(this: TreeView, item: TreeItemModel): string | Node;\r\n    itemToolbarDelegate(this: TreeView, item: TreeItemModel): HTMLEToolBarElement | null;\r\n    itemMenuDelegate(this: TreeView): HTMLEMenuElement | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeview\": TreeView,\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-treeview\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: TreeModel;\r\n\r\n    #dragImages: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    draggable!: boolean;\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n            \r\n            .offscreen {\r\n                position: absolute;\r\n                top: 0;\r\n                left: 0;\r\n                transform: translateY(-100%);\r\n                display: block;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            .dragimage {\r\n                white-space: nowrap;\r\n                margin: 1px;\r\n                display: inline-block;\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n                border-radius: 3px; \r\n                padding: 2px 4px;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.#dragImages = new WeakMap();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"draggable\": {\r\n                const {treeElement} = this;\r\n                if (treeElement) {\r\n                    Array.from(treeElement.items).forEach(\r\n                        item_i => item_i.draggable = newValue !== null\r\n                    );\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get treeElement(): HTMLETreeElement | null {\r\n        return this.shadowRoot.querySelector<HTMLETreeElement>(\"e-tree\")!;\r\n    }\r\n\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement | null  {\r\n        return this.shadowRoot.querySelector<HTMLETreeItemElement>(`e-treeitem[uri=${item.uri}]`)!;\r\n    }\r\n\r\n    #getTreeItemElementUri(item: HTMLETreeItemElement): string {\r\n        let uri = \"\";\r\n        let closestItem = <HTMLETreeItemElement | null>item;\r\n        while (closestItem !== null) {\r\n            const {dataset, parentElement} = closestItem;\r\n            const {name} = dataset;\r\n            uri = `${name}/` + uri;\r\n            closestItem = parentElement?.closest(\"e-treeitem\") ?? null;\r\n        }\r\n        return uri;\r\n    }\r\n\r\n    treeItem(element: HTMLETreeItemElement): TreeItemModel | null  {\r\n        return this.model.getItemByUri(this.#getTreeItemElementUri(element));\r\n    }\r\n\r\n    override renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            attributes: {\r\n                tabindex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                focus: <EventListener>this.#handleFocusEvent.bind(this),\r\n                focusin: <EventListener>this.#handleFocusInEvent.bind(this),\r\n                focusout: <EventListener>this.#handleFocusOutEvent.bind(this),\r\n            }\r\n        });\r\n        return fragment(\r\n            /*element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"/css/main.css\"\r\n                }\r\n            }),*/\r\n            treeElement,\r\n            element(\"slot\"),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    itemContentDelegate(item: TreeItemModel): string | Node {\r\n        return reactiveElement(\r\n            item,\r\n            element(\"span\"),\r\n            [\"name\"],\r\n            (label, property, oldValue, newValue) => {\r\n                label.textContent = newValue;\r\n            }\r\n        );\r\n    }\r\n\r\n    itemToolbarDelegate(item: TreeItemModel): HTMLEToolBarElement | null {\r\n        return null;\r\n    }\r\n    \r\n    itemMenuDelegate(this: TreeView): HTMLEMenuElement | null {\r\n        return null;\r\n    }\r\n\r\n    selectedItems(): TreeItemModel[] {\r\n        const {treeElement} = this;\r\n        if (treeElement) {\r\n            const selectedElements = treeElement.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <TreeItemModel>this.treeItem(item_i)\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    activeItem(): TreeItemModel | null {\r\n        const {treeElement} = this;\r\n        if (treeElement) {\r\n            const {activeItem} = treeElement;\r\n            return activeItem ?\r\n                this.treeItem(activeItem) :\r\n                null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getDragImage(model: TreeItemModel): Element | null {\r\n        return this.#dragImages.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): HTMLETreeItemElement {\r\n        const {draggable} = this;\r\n        const {index, level, name} = item;\r\n        const toolbar = this.itemToolbarDelegate(item);\r\n        const content = this.itemContentDelegate(item);\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            element(\"e-treeitem\", {\r\n                attributes: {\r\n                    draggable: String(draggable),\r\n                    posinset: index,\r\n                    level: level\r\n                },\r\n                dataset: {\r\n                    name: name\r\n                },\r\n                children: [\r\n                    ...(content ? [content] : []),\r\n                    ...(toolbar ? [toolbar] : [])\r\n                ]\r\n            }),\r\n            [\"index\", \"name\", \"type\"],\r\n            (treeitem, propertyName, oldValue, newValue) => {\r\n                switch (propertyName) {\r\n                    case \"index\": {\r\n                        treeitem.posinset = newValue;\r\n                        break;\r\n                    }\r\n                    case \"name\": {\r\n                        const {dataset} = treeitem;\r\n                        dataset.name = newValue;\r\n                        break;\r\n                    }\r\n                    case \"type\": {\r\n                        treeitem.type = newValue;\r\n                        switch (newValue) {\r\n                            case \"parent\": {\r\n                                treeitem.append(\r\n                                    element(\"e-treeitemgroup\", {\r\n                                        attributes: {\r\n                                            slot: \"group\"\r\n                                        },\r\n                                        children: reactiveChildElements(item.childItems,\r\n                                            item => this.#renderTreeItem(item)\r\n                                        )\r\n                                    })\r\n                                );\r\n                                break;\r\n                            }\r\n                            case \"leaf\": {\r\n                                const {group} = treeitem;\r\n                                if (group) {\r\n                                    group.remove();\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"name\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImages.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = targetTree.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map(element_i => this.#getTreeItemElementUri(element_i))\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.#getDragImage(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = this.#getTreeItemElementUri(targetItem);\r\n                const targetItemModel = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i === targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>(\r\n                        transferedUris.map(\r\n                            uri_i => model.getItemByUri(uri_i)\r\n                        ).filter(\r\n                            item_i => item_i !== null\r\n                        )\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const {childItems: targetList} =\r\n                        targetType === \"parent\" ? targetItemModel :\r\n                        targetParentItem ? targetParentItem : model;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.name === item_i.name);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.name}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    const transferedItemsModelList = new TreeItemModelList(transferedItems);\r\n                    transferedItemsModelList.remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(targetItem.posinset, ...transferedItems);\r\n                    }\r\n                    const newElements = targetTree.querySelectorAll<HTMLETreeItemElement>(`e-treeitem:is(${\r\n                        transferedItems.map(item_i => `[data-uri=\"${item_i.uri}\"]`).join(\",\")\r\n                    })`);\r\n                    targetTree.beginSelection();\r\n                    newElements.forEach(element_i => element_i.selected = true);\r\n                    targetTree.endSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const contextMenu = this.itemMenuDelegate();\r\n            if (contextMenu !== null) {\r\n                contextMenu.contextual = true;\r\n                contextMenu.addEventListener(\"close\", () => {\r\n                    targetItem.focus({preventScroll: true});\r\n                });\r\n                targetTree.append(contextMenu);\r\n                contextMenu.positionContextual(clientX, clientY);\r\n                contextMenu.focus({preventScroll: true});\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        if (relatedTarget !== null  && !this.contains(<Node | null>relatedTarget)) {\r\n            const relatedPosition = (<Node>relatedTarget).compareDocumentPosition(this);\r\n            if (!(relatedPosition & Node.DOCUMENT_POSITION_DISCONNECTED) && (relatedPosition & Node.DOCUMENT_POSITION_PRECEDING)) {\r\n                const {activeItem} = targetTree;\r\n                if (activeItem) {\r\n                    const itemToolbar = activeItem.querySelector(\"e-toolbar\");\r\n                    if (itemToolbar) {\r\n                        event.preventDefault();\r\n                        itemToolbar.focus();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const itemToolbar = targetItem.querySelector(\"e-toolbar\");\r\n            if (itemToolbar) {\r\n                itemToolbar.tabIndex = itemToolbar.contains(<Node | null>target) ? -1 : 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const itemToolbar = targetItem.querySelector(\"e-toolbar\");\r\n            if (itemToolbar) {\r\n                itemToolbar.tabIndex = itemToolbar.contains(<Node | null>target) ? 0 : -1;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    render(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        if (model !== this.#model) {\r\n            this.#model = model;\r\n        }\r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    render(): void {\r\n        const {shadowRoot} = this;\r\n        if (shadowRoot !== null) {\r\n            const shadow = this.renderShadow();\r\n            if (shadow) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { heightSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"heightsash\": HeightSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface HeightSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar heightSashWidget = new (\r\nWidget({\r\n    name: \"heightsash\"\r\n})(class HeightSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"heightsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"top\" | \"bottom\" {\r\n        return <\"top\" | \"bottom\">sash.getAttribute(\"data-growdir\") ?? \"top\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"top\" | \"bottom\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setHeight(sash: HTMLElement, height: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"height\", `${height}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = this.#pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = height + (growdir == \"top\" ? -1 : 1) * movementX;\r\n            this.setHeight(sash, newHeight);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { ReactiveChildElements } from \"../../elements/Element\";\r\nimport { camelToTrain } from \"../../elements/Snippets\";\r\n\r\nexport { WidgetFactoryConstructor };\r\n\r\nexport { widget };\r\nexport { Widget };\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slotted(slot);\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slotted(slot);\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}. The corresponding module might not be imported.`);\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { widthSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"widthsash\": WidthSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface WidthSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar widthSashWidget = new (\r\nWidget({\r\n    name: \"widthsash\"\r\n})(class WidthSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"widthsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"right\" | \"left\" {\r\n        return <\"right\" | \"left\">sash.getAttribute(\"data-growdir\") ?? \"right\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"right\" | \"left\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setWidth(sash: HTMLElement, width: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const pointerMoveCallback = this.#pointerMoveCallback;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(sash, newWidth);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, name, disabled, multiselectable} = properties;\r\n            if (id !== undefined) {\r\n                combobox.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                combobox.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                combobox.tabIndex = tabIndex;\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== undefined) {\r\n            const {label, name, value, disabled} = properties;\r\n            let {selected} = properties;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", String(value));\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridBodyWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridbody\": GridBodyWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridBodyWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridBodyWidget = new (\r\nWidget({\r\n    name: \"gridbody\"\r\n})(class GridBodyWidgetFactoryBase extends WidgetFactory implements GridBodyWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tbody\", {\r\n            attributes: {\r\n                class: \"gridbody\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(body: HTMLElement) {\r\n        return body;\r\n    }\r\n\r\n    slottedCallback(body: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"gridrow\")) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, disabled, headers} = init;\r\n            if (id !== undefined) {\r\n                cell.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                cell.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                cell.tabIndex = tabIndex;\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            if (headers !== undefined) {\r\n                this.setHeaders(cell, headers);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeadWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridhead\": GridHeadWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridHeadWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridHeadWidget = new (\r\nWidget({\r\n    name: \"gridhead\"\r\n})(class GridHeadWidgetFactoryBase extends WidgetFactory implements GridHeadWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"thead\", {\r\n            attributes: {\r\n                class: \"gridhead\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(head: HTMLElement) {\r\n        return head;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeaderWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridHeaderWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex} = init;\r\n            if (id !== undefined) {\r\n                header.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                header.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                header.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    slot(header: HTMLElement): HTMLElement | null {\r\n        return header;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n    clearSelection(grid: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        //grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, selectby, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                grid.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                grid.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                grid.tabIndex = tabIndex;\r\n            }\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement): HTMLElement | null {\r\n        return grid;\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*#handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }*/\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(properties: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                list.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                list.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                list.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? String(false));\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    if (this.getExpanded(targetItem)) {\r\n                        this.getMenu(targetItem)?.focus({preventScroll: true});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement;\r\n    setPosition(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, contextual, position} = properties;\r\n            if (id !== undefined) {\r\n                menu.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                menu.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                menu.tabIndex = tabIndex;\r\n            }\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n            if (position !== undefined) {\r\n                const {x, y} = position;\r\n                this.setPosition(menu, x, y);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    setPosition(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        title?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        label?: string;\r\n        title?: string;\r\n        type?: TreeItemType;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, label, title, type = \"leaf\", disabled, draggable} = properties;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (title !== undefined) {\r\n                this.setTitle(item, title);\r\n            }\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing .content slot.\");\r\n        return content;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return item.getAttribute(\"aria-label\") ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"aria-label\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.title;\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.title = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                tree.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                tree.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                tree.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// startup\n// Load entry module and return exports\n__webpack_require__(372);\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(4545);\n__webpack_require__(7023);\n__webpack_require__(6376);\n__webpack_require__(9795);\n__webpack_require__(174);\n__webpack_require__(7830);\n__webpack_require__(9994);\n__webpack_require__(7216);\n__webpack_require__(3112);\n__webpack_require__(2074);\n__webpack_require__(7950);\n__webpack_require__(6996);\n__webpack_require__(50);\n__webpack_require__(1082);\n__webpack_require__(4343);\n__webpack_require__(6815);\n__webpack_require__(1337);\n__webpack_require__(1391);\n__webpack_require__(8483);\n__webpack_require__(9560);\n__webpack_require__(2661);\n__webpack_require__(2753);\n__webpack_require__(8277);\n__webpack_require__(925);\n__webpack_require__(2196);\n__webpack_require__(4422);\n__webpack_require__(7080);\n__webpack_require__(4041);\n__webpack_require__(4653);\n__webpack_require__(3675);\n__webpack_require__(8101);\n__webpack_require__(5617);\n__webpack_require__(9372);\n__webpack_require__(5028);\n__webpack_require__(6983);\n__webpack_require__(9114);\n__webpack_require__(1376);\n__webpack_require__(2172);\n__webpack_require__(3394);\n__webpack_require__(758);\n__webpack_require__(1827);\n__webpack_require__(5888);\n__webpack_require__(670);\n__webpack_require__(4141);\n__webpack_require__(2697);\n__webpack_require__(1573);\n__webpack_require__(1738);\n__webpack_require__(4078);\n__webpack_require__(338);\n__webpack_require__(4597);\n__webpack_require__(5304);\n__webpack_require__(1234);\n__webpack_require__(1980);\n__webpack_require__(1967);\n__webpack_require__(5459);\n__webpack_require__(5489);\n__webpack_require__(7001);\n__webpack_require__(9137);\n__webpack_require__(3473);\n__webpack_require__(1865);\n__webpack_require__(236);\n__webpack_require__(565);\n__webpack_require__(248);\n__webpack_require__(92);\n__webpack_require__(2545);\n__webpack_require__(7885);\n__webpack_require__(2858);\n__webpack_require__(4815);\n__webpack_require__(8429);\n__webpack_require__(1546);\n__webpack_require__(9343);\n__webpack_require__(5403);\n__webpack_require__(9248);\n__webpack_require__(171);\n__webpack_require__(680);\n__webpack_require__(4266);\n__webpack_require__(9760);\nvar __webpack_exports__ = __webpack_require__(598);\n"],"names":["leafPrototypes","getProto","Key","KeyModifier","MouseButton","AttributeProperty","init","target","property","constructor","prototype","propertyName","String","defaultValue","observed","name","observedAttributes","Reflect","get","Array","isArray","push","Object","defineProperty","value","writable","type","Boolean","this","hasAttribute","set","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","options","customElements","define","QueryProperty","propertyKey","selector","getter","withinShadowRoot","shadowRoot","querySelector","fragment","nodes","document","createDocumentFragment","append","element","tagName","attributes","dataset","children","listeners","createElement","entries","forEach","attributeName","attributeValue","undefined","toggleAttribute","elementDataset","keys","datasetEntry_i","from","name_i","listener_i","addEventListener","reactiveElementsMap","WeakMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","splice","indexOf","reactiveElementsPropertyObserver","records","record_i","oldValue","newValue","reactiveElement_i","elementRef","react","properties","deref","includes","WeakRef","register","observerOptions","propertiesFilter","concat","filter","property_i","i","observe","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","values","length","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","changeType","LIST_INSERT","LIST_REMOVE","LIST_SORT","insertedIndex","insertedItems","insertedItemsArray","map","before","removedIndex","removedItems","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","sortedIndices","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","childList","replaceChildren","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","camelToTrain","str","replace","toLowerCase","shadowTemplate","style","HTMLEGridElementBase","HTMLElement","super","createTreeWalker","NodeFilter","SHOW_ELEMENT","bind","attachShadow","mode","adoptedStylesheet","CSSStyleSheet","adoptedStyleSheets","content","cloneNode","cells","querySelectorAll","rows","activeCell","activeRow","body","head","connectedCallback","tabIndex","beginSelection","endSelection","dispatchEvent","Event","bubbles","clearSelection","selectedCells","selectedRows","node","hidden","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","to","fromIndex","toIndex","slice","Math","min","max","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","nextVisibleRow","DOCUMENT_POSITION_PRECEDING","previousVisibleRow","selectedCell_i","selected","cell_i","selectedRow_i","row_i","cell","active","currentNode","row","cellsWalker","lastChild","previousNode","nextNode","rowsWalker","parentNode","root","closestRow","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","event","ctrlKey","shiftKey","selectby","composedPath","targetCell","find","target_i","lastSelectedCell","targetRow","lastSelectedRow","stopPropagation","key","firstRow","firstCell","lastRow","lastCell","preventDefault","previousCell","focus","preventScroll","nextCell","topCell","bottomCell","click","relatedTarget","closest","assignedElements","element_i","posinset","HTMLEGridBodyElementBase","item_i","HTMLEGridBodyElement","HTMLEGridCellElementBase","attributeChangedCallback","HTMLEGridCellElement","HTMLEGridHeadElementBase","HTMLEGridRowElementBase","menu","HTMLEGridRowElement","HTMLEGridRowGroupElementBase","HTMLEGridRowGroupElement","HTMLEListElementBase","activeItem","dropTargetItem","items","parseInt","selectedItems","walker","item","selectedItem_i","contains","droptarget","rootNode","Document","getRootNode","ShadowRoot","host","firstItem","lastItem","previousItem","nextItem","lastSelectedItem","HTMLEListItemElementBase","badge","toolbar","labelPart","textContent","slotName","H","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","toggleAnimations","HTMLEMenuElementBase","activeIndex","tabindex","positionContextual","x","y","width","menuWidth","height","menuHeight","getBoundingClientRect","scrollX","scrollY","window","left","top","clientWidth","clientHeight","overflowX","overflowY","setProperty","collapse","targetItem","checked","radio_i","toggle","nearestItem","contextual","remove","error","expanded","expand","HTMLEMenuElement","blur","cancel","toggleAnimation","animate","duration","finished","then","catch","finally","delete","clientX","clientY","right","bottom","intersectsWithMouse","containsRelatedTarget","assign","HTMLEMenuBarElementBase","disabled","previousSibling","nextSibling","Element","isExpanded","HTMLEMenuButtonElementBase","force","menuStyle","itemTop","itemBottom","itemLeft","itemRight","offsetParent","offsetLeft","offsetTop","HTMLEMenuButtonElement","slot","HTMLEMenuItemElementBase","internals","attachInternals","role","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","closestMenu","closestMenuTop","closestMenuLeft","part","HTMLEMenuItemElement","EMenuItem","label","trigger","title","button","checkbox","radio","submenu","HTMLEMenuItemGroupElementBase","HTMLEMenuItemGroupElement","radios","HTMLEStatusBarElementBase","HTMLEStatusItemElementBase","HTMLEStatusItemElement","onclick","HTMLEStatusItemGroupElementBase","HTMLEStatusItemGroupElement","HTMLETabElementBase","panel","controls","select","HTMLETabElement","HTMLETabListElementBase","tabs","activeTab","selectedTab","upgrade","tabToSelect","setTimeout","tabWidth","tabLeft","tabBottom","fill","easing","pseudoElement","tab","targetTab","dialogLeft","dialogTop","tab_i","HTMLETabPanelElementBase","id","wasExpandedOnMouseDown","HTMLEToolBarElementBase","pressed","menubutton","HTMLEToolBarElement","iconPart","HTMLEToolBarItemElementBase","prepend","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLETreeElementBase","getElementsByTagName","nextVisibleItem","previousVisibleItem","parentItem","HTMLETreeItemElementBase","level","HTMLETreeItemElement","HTMLETreeItemGroupElementBase","HTMLETreeItemGroupElement","HTMLEDialogElementBase","handleEvent","confirm","open","CustomEvent","close","HTMLEDraggableElementBase","references","referee","draggable","disconnectedCallback","thisRefIndex","getReference","reference","HTMLEDraggableElement","HTMLEDragzoneElementBase","draggables","selectedDraggables","selectDraggable","unselectDraggable","index","elem","thisSelectedDraggable","dragged","dataTransfer","dropEffect","setData","thisDraggedDraggable","targetIndex","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","getData","dragzone","getElementById","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","detail","action","once","predicate","toRemove","atPosition","HTMLEOptionElementBase","ariaSelected","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","mutationObserver","HTMLESelectElementBase","subtree","formAssociated","activeOption","selectedOption","optionToSelect","option_i","option","setFormValue","box","optionsStyle","targetOption","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","matchingOption","MutationObserver","mutationsList","mutation","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","getComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","parentElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","growdir","newHeight","computedNewHeight","requestAnimationFrame","HTMLEImportElementBase","src","async","outerHTML","fetch","response","ok","text","Error","statusText","barShadowTemplate","spinnerShadowTemplate","HTMLELoaderElementBase","HTMLESeparatorElementBase","HTMLEToolTipElementBase","tooltip","htmlFor","show","immediate","visible","opacity","delay","hide","oldTarget","targetListenerObject","removeEventListener","targetTop","targetBottom","targetLeft","targetRight","tooltipWidth","tooltipHeight","tooltipHalfWidth","tooltipHalfHeight","targetCenter","targetMiddle","tooltipStyle","arrow","arrowStyle","arrowWidth","arrowHeight","arrowHalfWidth","arrowHalfHeight","documentListenerObject","HTMLEWidthSashElementBase","setWidth","newWidth","ModelChangeRecordBase","ModelNodesList","PROPERTY_CHANGE","ModelChangeRecord","ModelEventBase","currentTarget","ModelEventTargetAccessor","setCurrentTarget","setTarget","ModelEvent","ModelEventTargetBase","Map","receiveEvent","callbacks","callback_i","callback","callbackIndex","findIndex","ModelNodeBase","setParent","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","record","ModelNodeRecordsAccessor","triggerChange","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","enumerable","ModelObjectBase","ModelObject","ModelList","sort","compareFunction","indexedItems","indexedItem_a","indexedItem_b","indexedItem_i","_items","insert","abs","clear","removedItem_i","ModelChangeObserver","listener","unobserve","disconnect","targets","observer","group_i","acceptNode","addedItems","addedObserverTargets","childNodes","removedObserverTargets","themeStylesheet","GridModel","initRows","columns","initColumns","getColumnByName","column_i","sortByColumn","column","sortOrder","sortorder","sortTest","row_1","row_2","cell_1","extract","cell_2","localeCompare","GridColumnModel","filters","GridRowModel","age","GridViewBase","setModel","render","gridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnCellsElements","renderShadow","rel","href","input","multisectable","contextmenu","setSearchFilter","rowElement","addDisplayFilter","displayFilters","removeDisplayFilter","filterIndex","removeAllDisplayFilters","searchFilter","some","filter_i","class","resizable","toString","headers","targetHead","targetHeader","contextMenu","columnHeaderElement","maxWidth","reduce","removeProperty","HTMLInputElement","matches","targetColumn","MenuModel","MenuItemModel","MenuViewBase","renderLight","menuitem","TreeModel","sortFunction","childItems","subtreeItems","item_a","item_b","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","call","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemModelList","count","removedItemsGroups","TreeItemModel","group","list_i","children_i","child_i","TreeViewBase","treeElement","treeItemElement","treeItem","dragstart","drop","focusin","focusout","itemContentDelegate","itemToolbarDelegate","itemMenuDelegate","closestItem","treeitem","dragImageElement","span","targetTree","selectedElements","selectedCount","selectedUris","uri_i","_","uris","uri_j","selectedUrisString","join","lastUri","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","split","transferedItems","targetType","targetParentItem","targetList","sameLabelIndex","item_j","copyWithin","newElements","relatedPosition","DOCUMENT_POSITION_DISCONNECTED","itemToolbar","ViewBase","shadow","light","View","create","pointerMovements","onCaptureFlags","queuedPointerCallbacks","sash","classList","growDir","add","setControls","setGrowDir","getGrowDir","getControls","setHeight","sashTarget","pointerMovement","slotsMap","slotsObserver","slotReferences","slotRef_i","widget","slottedCallback","widgetsMap","attributesObserver","WidgetFactory","Proxy","apply","thisArg","argumentsList","observedSlots","slotName_i","slotElement","slot_i","slotReference","attributeFilter","attributeOldValue","widgets","Widget","pointerMoveCallback","combobox","setExpanded","multiselectable","setName","setDisabled","setMultiSelectable","getName","getDisabled","getExpanded","getMultiSelectable","targetCombobox","addedNodes","optionWidget","setSelected","setLabel","setValue","getLabel","getValue","getSelected","gridCellWidget","setHeaders","getHeaders","setPosInSet","getPosInSet","posInSet","setActive","getActive","setDropTarget","getDropTarget","scope","header","gridRowWidget","grid","setSelectBy","getSelectBy","closestRowCells","targetGrid","listItemWidget","tree","relatedTargetRoot","relatedTargetHost","menubar","menuItemWidget","hasIcon","hasArrow","keyshortcut","setKeyShortcut","setChecked","setType","hasChildMenu","childNode_i","getMenu","getKeyShortcut","keyshortcutsPart","after","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","arrowPart","getChecked","menuComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","setContextual","setPosition","getContextual","menuitem_i","Promise","resolve","reject","timeout","clearTimeout","targetMenu","toolbarItemWidget","setPressed","getTitle","setTitle","getPressed","setOrientation","getOrientation","targetToolbar","treeItemWidget","setDraggable","e","getDraggable","setLevel","getLevel","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","getPrototypeOf","obj","t","__esModule","ns","r","def","current","getOwnPropertyNames","d","definition","o","g","globalThis","Function","prop","hasOwnProperty","Symbol","toStringTag","scriptUrl","importScripts","location","currentScript","scripts","p"],"sourceRoot":""}